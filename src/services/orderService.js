import apiService from './apiService';
import { API_ENDPOINTS } from '../config/apiEndpoints';

class OrderService {
    // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa buyer
    async getBuyerOrders(buyerId, page = 1, pageSize = 20) {
        try {
            console.log('üîç Fetching buyer orders for:', buyerId);
            const endpoint = `${API_ENDPOINTS.ORDER.GET_BUYER_ORDERS(buyerId)}?page=${page}&pageSize=${pageSize}`;
            const response = await apiService.get(endpoint);
            console.log('üìã Raw response:', response);

            // Backend tr·∫£ v·ªÅ {success: true, data: PagedResult}
            const responseData = response.data || response;
            const ordersData = responseData.data || responseData.items || responseData;

            console.log('üì¶ Orders data structure:', ordersData);

            // Enrich data for display
            let enrichedData = ordersData;
            if (Array.isArray(ordersData)) {
                // If direct array
                enrichedData = await this.enrichOrderData(ordersData);
            } else if (ordersData.items) {
                // If paginated result
                enrichedData = {
                    ...ordersData,
                    items: await this.enrichOrderData(ordersData.items)
                };
            }

            return {
                success: true,
                data: enrichedData,
                message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error getting buyer orders:', error);

            // Fallback v·ªõi mock data cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock data for development');
                return {
                    success: true,
                    data: this.getMockBuyerOrders(),
                    message: 'S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u - API ch∆∞a s·∫µn s√†ng'
                };
            }

            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng');
        }
    }

    // L·ªçc ƒë∆°n h√†ng c·ªßa buyer
    async filterBuyerOrders(filterData) {
        try {
            console.log('üîç Filtering buyer orders with:', filterData);
            const response = await apiService.post(API_ENDPOINTS.ORDER.FILTER_ORDERS, filterData);
            console.log('üìã Filter response:', response);

            // Backend tr·∫£ v·ªÅ {success: true, data: PagedResult}
            const responseData = response.data || response;
            const ordersData = responseData.data || responseData.items || responseData;

            // Enrich data for display
            let enrichedData = ordersData;
            if (Array.isArray(ordersData)) {
                enrichedData = await this.enrichOrderData(ordersData);
            } else if (ordersData.items) {
                enrichedData = {
                    ...ordersData,
                    items: await this.enrichOrderData(ordersData.items)
                };
            }

            return {
                success: true,
                data: enrichedData,
                message: 'L·ªçc ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error filtering buyer orders:', error);

            // Fallback v·ªõi mock data cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock data for development');
                return {
                    success: true,
                    data: this.getMockBuyerOrders(),
                    message: 'S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u - API ch∆∞a s·∫µn s√†ng'
                };
            }

            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·ªçc ƒë∆°n h√†ng');
        }
    }

    // H·ªßy ƒë∆°n h√†ng v·ªõi l√Ω do (POST /api/order/{orderId}/cancel)
    async cancelOrder(orderId, cancelReason) {
        try {
            console.log('üö´ Cancelling order:', orderId, 'Reason:', cancelReason);
            const response = await apiService.post(API_ENDPOINTS.ORDER.CANCEL(orderId), {
                cancelReason
            });

            return {
                success: true,
                data: response.data || response,
                message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error cancelling order:', error);
            
            // Fallback v·ªõi mock response cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock response for development');
                return {
                    success: true,
                    data: {
                        orderId: orderId,
                        status: 'Cancelled',
                        cancelReason: cancelReason,
                        updatedAt: new Date().toISOString()
                    },
                    message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng (Mock)'
                };
            }
            
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng');
        }
    }

    // ƒê·∫∑t l·∫°i ƒë∆°n h√†ng
    async reorderOrder(orderId) {
        try {
            const response = await apiService.post(API_ENDPOINTS.ORDER.REORDER(orderId));
            return {
                success: true,
                data: response.data || response,
                message: 'ƒê·∫∑t l·∫°i ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error reordering:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i ƒë∆°n h√†ng');
        }
    }

    // ƒê√°nh gi√° ƒë∆°n h√†ng
    async reviewOrder(orderId, reviewData) {
        try {
            const response = await apiService.post(API_ENDPOINTS.ORDER.REVIEW(orderId), reviewData);
            return {
                success: true,
                data: response.data || response,
                message: 'ƒê√°nh gi√° th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error reviewing order:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°');
        }
    }

    // Enrich order data v·ªõi th√¥ng tin s·∫£n ph·∫©m v√† c·ª≠a h√†ng
    async enrichOrderData(orders) {
        if (!orders || orders.length === 0) return orders;

        try {
            console.log('üîç Enriching order data for', orders.length, 'orders');

            const enrichedOrders = await Promise.all(orders.map(async (order) => {
                // L·∫•y th√¥ng tin seller
                let sellerInfo = {};
                try {
                    console.log('üë§ Fetching seller info for:', order.sellerId);
                    const sellerResponse = await apiService.get(API_ENDPOINTS.USER.GET_BY_ID(order.sellerId));
                    console.log('üë§ Seller response:', sellerResponse);

                    // Backend tr·∫£ v·ªÅ {success: true, data: UserDTO}
                    const sellerData = sellerResponse.data || sellerResponse;
                    const seller = sellerData.data || sellerData;

                    sellerInfo = {
                        sellerName: seller?.fullName || seller?.username || seller?.name || `C·ª≠a h√†ng`,
                        sellerAvatar: seller?.avatar || seller?.profilePicture || `https://i.pravatar.cc/50?u=${order.sellerId}`
                    };
                    console.log('‚úÖ Seller info loaded:', sellerInfo.sellerName);
                } catch (error) {
                    console.warn('‚ö†Ô∏è Could not fetch seller info for', order.sellerId, error.message);
                    sellerInfo = {
                        sellerName: `C·ª≠a h√†ng ${order.sellerId.slice(-4)}`,
                        sellerAvatar: `https://i.pravatar.cc/50?u=${order.sellerId}`
                    };
                }

                // Enrich items v·ªõi th√¥ng tin s·∫£n ph·∫©m
                const enrichedItems = await Promise.all(order.items.map(async (item) => {
                    try {
                        console.log('üì¶ Fetching product info for:', item.productId);
                        const productResponse = await apiService.get(API_ENDPOINTS.PRODUCT.GET_BY_ID(item.productId));
                        console.log('üì¶ Product response:', productResponse);

                        // Backend tr·∫£ v·ªÅ {success: true, data: ProductDto}
                        const productData = productResponse.data || productResponse;
                        const product = productData.data || productData;

                        const enrichedItem = {
                            ...item,
                            name: product?.name || product?.productName || `S·∫£n ph·∫©m ${item.productId}`,
                            unit: product?.unit || product?.unitType || '',
                            total: item.quantity * item.priceAtPurchase
                        };
                        console.log('‚úÖ Product info loaded:', enrichedItem.name);
                        return enrichedItem;
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Could not fetch product info for', item.productId, error.message);
                        return {
                            ...item,
                            name: `S·∫£n ph·∫©m ${item.productId}`,
                            unit: '',
                            total: item.quantity * item.priceAtPurchase
                        };
                    }
                }));

                const enrichedOrder = {
                    ...order,
                    ...sellerInfo,
                    items: enrichedItems,
                    canReview: order.status === 'Completed' && !order.reviewed,
                    reviewed: order.reviewed || false
                };

                console.log('üéØ Enriched order:', enrichedOrder.id, 'with', enrichedItems.length, 'items');
                return enrichedOrder;
            }));

            console.log('‚ú® All orders enriched successfully');
            return enrichedOrders;
        } catch (error) {
            console.error('‚ùå Error enriching order data:', error);
            // Return original orders with fallback data if enrichment fails
            return orders.map(order => ({
                ...order,
                sellerName: `C·ª≠a h√†ng ${order.sellerId.slice(-4)}`,
                sellerAvatar: `https://i.pravatar.cc/50?u=${order.sellerId}`,
                items: order.items.map(item => ({
                    ...item,
                    name: `S·∫£n ph·∫©m ${item.productId}`,
                    unit: '',
                    total: item.quantity * item.priceAtPurchase
                })),
                canReview: order.status === 'Completed' && !order.reviewed,
                reviewed: order.reviewed || false
            }));
        }
    }    // Mock data cho buyer orders
    getMockBuyerOrders() {
        return {
            items: [
                {
                    id: "DH001",
                    buyerId: "buyer1",
                    sellerId: "seller1",
                    totalAmount: 82500,
                    deliveryAddress: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n Ninh Ki·ªÅu, C·∫ßn Th∆°",
                    status: "Completed",
                    paymentStatus: "paid",
                    notes: "Giao h√†ng s·ªõm nh√© shop",
                    createdAt: "2024-01-15T08:30:00",
                    updatedAt: "2024-01-15T10:30:00",
                    expectedDeliveryTime: "2024-01-15T16:00:00",
                    items: [
                        {
                            productId: "1",
                            quantity: 2,
                            priceAtPurchase: 15000,
                            name: "Rau mu·ªëng",
                            unit: "kg",
                            total: 30000
                        },
                        {
                            productId: "2",
                            quantity: 1.5,
                            priceAtPurchase: 25000,
                            name: "C√† chua",
                            unit: "kg",
                            total: 37500
                        }
                    ],
                    // Extended properties for display
                    sellerName: "Gian h√†ng C√¥ Lan",
                    sellerAvatar: "https://i.pravatar.cc/50?img=1",
                    canReview: true,
                    reviewed: false
                },
                {
                    id: "DH002",
                    buyerId: "buyer1",
                    sellerId: "seller2",
                    totalAmount: 35000,
                    deliveryAddress: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n C√°i RƒÉng, C·∫ßn Th∆°",
                    status: "Paid",
                    paymentStatus: "paid",
                    notes: "",
                    createdAt: "2024-01-16T14:20:00",
                    updatedAt: "2024-01-16T15:20:00",
                    expectedDeliveryTime: "2024-01-16T18:00:00",
                    items: [
                        {
                            productId: "3",
                            quantity: 1,
                            priceAtPurchase: 20000,
                            name: "X√† l√°ch",
                            unit: "kg",
                            total: 20000
                        }
                    ],
                    sellerName: "C·ª≠a h√†ng Anh Minh",
                    sellerAvatar: "https://i.pravatar.cc/50?img=2",
                    canReview: false,
                    reviewed: false
                },
                {
                    id: "DH003",
                    buyerId: "buyer1",
                    sellerId: "seller3",
                    totalAmount: 57000,
                    deliveryAddress: "789 ƒê∆∞·ªùng DEF, Qu·∫≠n √î M√¥n, C·∫ßn Th∆°",
                    status: "Confirmed",
                    paymentStatus: "pending",
                    notes: "G·ªçi tr∆∞·ªõc khi giao",
                    createdAt: "2024-01-17T09:15:00",
                    updatedAt: "2024-01-17T09:15:00",
                    expectedDeliveryTime: "2024-01-17T17:00:00",
                    items: [
                        {
                            productId: "4",
                            quantity: 2,
                            priceAtPurchase: 12000,
                            name: "B·∫Øp c·∫£i",
                            unit: "kg",
                            total: 24000
                        },
                        {
                            productId: "5",
                            quantity: 1,
                            priceAtPurchase: 18000,
                            name: "C·∫£i th·∫£o",
                            unit: "kg",
                            total: 18000
                        }
                    ],
                    sellerName: "Gian h√†ng Ch√∫ T√°m",
                    sellerAvatar: "https://i.pravatar.cc/50?img=3",
                    canReview: false,
                    reviewed: false
                }
            ],
            totalCount: 3,
            currentPage: 1,
            pageSize: 20,
            totalPages: 1
        };
    }
    // Get orders for seller (existing endpoint)
    async getSellerOrders(params = {}) {
        try {
            const queryParams = new URLSearchParams();
            if (params.status) queryParams.append('status', params.status);
            if (params.page) queryParams.append('page', params.page);
            if (params.pageSize) queryParams.append('pageSize', params.pageSize);
            if (params.fromDate) queryParams.append('fromDate', params.fromDate);
            if (params.toDate) queryParams.append('toDate', params.toDate);

            const url = API_ENDPOINTS.ORDER.GET_SELLER_ORDERS + (queryParams.toString() ? '?' + queryParams.toString() : '');
            const response = await apiService.get(url);

            // Always return data as array for FE compatibility
            const apiData = response.data || response || {};
            return {
                success: true,
                data: {
                    ...apiData,
                    items: Array.isArray(apiData.items) ? apiData.items : (Array.isArray(apiData) ? apiData : [])
                },
                message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error getting seller orders:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng');
        }
    }

    // Get recent orders (latest 5-10 orders)
    async getRecentOrders(sellerId, limit = 10) {
        return await this.getSellerOrders(sellerId, {
            limit,
            page: 1,
            // Sort by newest first (this would be handled by API)
            sortBy: 'createdAt',
            sortOrder: 'desc'
        });
    }

    // Get order by ID
    async getOrderById(orderId) {
        try {
            const response = await apiService.get(API_ENDPOINTS.ORDER.GET_BY_ID(orderId));
            return {
                success: true,
                data: response.data || response,
                message: 'L·∫•y th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error getting order:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë∆°n h√†ng');
        }
    }

    // Update order status
    async updateOrderStatus(orderId, status, notes = '') {
        try {
            const response = await apiService.put(API_ENDPOINTS.ORDER.UPDATE_STATUS(orderId), {
                status,
                notes
            });

            return {
                success: true,
                data: response.data || response,
                message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error updating order status:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng');
        }
    }

    // Complete payment for order - DEPRECATED (use markOrderAsPaid instead)
    async completePayment(orderId) {
        console.warn('‚ö†Ô∏è completePayment is deprecated, use markOrderAsPaid instead');
        return this.markOrderAsPaid(orderId);
    }

    // Seller x√°c nh·∫≠n c√≤n h√†ng (POST /api/order/{orderId}/confirm)
    async confirmOrder(orderId) {
        try {
            console.log('‚úÖ Confirming order:', orderId);
            const response = await apiService.post(API_ENDPOINTS.ORDER.CONFIRM(orderId));

            return {
                success: true,
                data: response.data || response,
                message: 'X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error confirming order:', error);
            console.error('‚ùå Error details:', {
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                message: error.response?.data?.message || error.message
            });
            
            // Check for specific error types
            if (error.response?.status === 403) {
                throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n ƒë∆°n h√†ng n√†y.');
            }
            
            if (error.response?.status === 401) {
                throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }
            
            if (error.response?.status === 404) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†y.');
            }
            
            // Fallback v·ªõi mock response cho testing (ch·ªâ khi kh√¥ng ph·∫£i l·ªói authorization/validation)
            if (process.env.NODE_ENV === 'development' && !error.response?.status) {
                console.warn('üîÑ Using mock response for development (network error)');
                return {
                    success: true,
                    data: {
                        orderId: orderId,
                        status: 'Confirmed',
                        confirmedAt: new Date().toISOString()
                    },
                    message: 'X√°c nh·∫≠n ƒë∆°n h√†ng th√†nh c√¥ng (Mock)'
                };
            }
            
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng');
        }
    }

    // Seller x√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn (POST /api/order/{orderId}/mark-paid)
    async markOrderAsPaid(orderId) {
        try {
            console.log('üí∞ Marking order as paid:', orderId);
            const response = await apiService.post(API_ENDPOINTS.ORDER.MARK_PAID(orderId));

            return {
                success: true,
                data: response.data || response,
                message: 'X√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error marking order as paid:', error);
            console.error('‚ùå Error details:', {
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                message: error.response?.data?.message || error.message
            });
            
            // Check for specific error types
            if (error.response?.status === 403) {
                throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n thanh to√°n cho ƒë∆°n h√†ng n√†y.');
            }
            
            if (error.response?.status === 401) {
                throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }
            
            if (error.response?.status === 404) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†y.');
            }
            
            // Fallback v·ªõi mock response cho testing (ch·ªâ khi kh√¥ng ph·∫£i l·ªói authorization/validation)
            if (process.env.NODE_ENV === 'development' && !error.response?.status) {
                console.warn('üîÑ Using mock response for development (network error)');
                return {
                    success: true,
                    data: {
                        orderId: orderId,
                        paymentStatus: 'Paid',
                        paidAt: new Date().toISOString()
                    },
                    message: 'X√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn th√†nh c√¥ng (Mock)'
                };
            }
            
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë√£ nh·∫≠n ti·ªÅn');
        }
    }

    // Buyer x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng (POST /api/order/{orderId}/complete)
    async completeOrderByBuyer(orderId) {
        try {
            console.log('üì¶ Buyer completing order:', orderId);
            
            // Get current user to include buyer ID for authorization
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            const buyerId = user.id || user._id;
            const token = localStorage.getItem('token');
            
            console.log('üë§ Current user info:', {
                userId: buyerId,
                userRole: user.role || user.userType,
                hasToken: !!token,
                tokenPreview: token ? token.substring(0, 20) + '...' : 'No token'
            });
            
            if (!buyerId) {
                throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }
            
            console.log('üì§ Sending complete order request...');
            const response = await apiService.post(API_ENDPOINTS.ORDER.COMPLETE(orderId));

            return {
                success: true,
                data: response.data || response,
                message: 'X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error completing order by buyer:', error);
            console.error('‚ùå Error details:', {
                status: error.response?.status,
                statusText: error.response?.statusText,
                data: error.response?.data,
                message: error.response?.data?.message || error.message
            });
            
            // Check if it's an authorization error
            if (error.response?.status === 403) {
                throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn ho√†n th√†nh ƒë∆°n h√†ng n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p.');
            }
            
            if (error.response?.status === 401) {
                throw new Error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
            }
            
            if (error.response?.status === 404) {
                throw new Error('Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†y.');
            }
            
            if (error.response?.status === 400) {
                throw new Error(error.response?.data?.message || 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.');
            }
            
            // Fallback v·ªõi mock response cho testing (ch·ªâ khi kh√¥ng ph·∫£i l·ªói authorization/validation)
            if (process.env.NODE_ENV === 'development' && !error.response?.status) {
                console.warn('üîÑ Using mock response for development (network error)');
                return {
                    success: true,
                    data: {
                        orderId: orderId,
                        status: 'Completed',
                        completedAt: new Date().toISOString()
                    },
                    message: 'X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng th√†nh c√¥ng (Mock)'
                };
            }
            
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng');
        }
    }

    // Cancel order
    async cancelOrder(orderId, cancelReason) {
        try {
            console.log('üö´ Cancelling order:', orderId, 'Reason:', cancelReason);
            const response = await apiService.post(API_ENDPOINTS.ORDER.CANCEL(orderId), {
                cancelReason
            });

            return {
                success: true,
                data: response.data || response,
                message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error cancelling order:', error);
            
            // Fallback v·ªõi mock response cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock response for development');
                return {
                    success: true,
                    data: {
                        orderId: orderId,
                        status: 'Cancelled',
                        cancelReason: cancelReason,
                        updatedAt: new Date().toISOString()
                    },
                    message: 'H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng (Mock)'
                };
            }
            
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng');
        }
    }

    // Get order statistics
    async getOrderStats(sellerId, period = 'month') {
        try {
            const endpoint = `${API_ENDPOINTS.ORDER.GET_ORDER_STATS(sellerId)}?period=${period}`;
            const response = await apiService.get(endpoint);
            return {
                success: true,
                data: response.data || response,
                message: 'L·∫•y th·ªëng k√™ ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error getting order stats:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ƒë∆°n h√†ng');
        }
    }

    // Complete order (for seller)
    async completeOrder(orderId) {
        try {
            const response = await apiService.post(API_ENDPOINTS.ORDER.COMPLETE(orderId));
            return {
                success: true,
                data: response.data || response,
                message: 'Ho√†n th√†nh ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error completing order:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ ho√†n th√†nh ƒë∆°n h√†ng');
        }
    }

    // Enrich order data with additional information for display
    async enrichOrderData(orders) {
        if (!Array.isArray(orders)) return orders;

        return orders.map(order => ({
            ...order,
            // Add display properties if not present
            sellerName: order.sellerName || order.seller?.name || 'C·ª≠a h√†ng',
            sellerAvatar: order.sellerAvatar || order.seller?.avatar || 'https://i.pravatar.cc/50?img=1',
            canReview: order.canReview !== undefined ? order.canReview : (order.status === 'Completed'),
            reviewed: order.reviewed || false,
            items: (order.items || []).map(item => ({
                ...item,
                name: item.name || item.productName || `S·∫£n ph·∫©m ${item.productId}`,
                unit: item.unit || '',
                total: item.total || (item.quantity * item.priceAtPurchase)
            }))
        }));
    }

    // Utility methods for UI display
    getStatusText(status) {
        const statusMap = {
            'Pending': 'Ch·ªù x√°c nh·∫≠n',        // Ng∆∞·ªùi mua m·ªõi ƒë·∫∑t h√†ng
            'Confirmed': 'ƒê√£ x√°c nh·∫≠n h√†ng',  // Ng∆∞·ªùi b√°n x√°c nh·∫≠n c√≤n h√†ng
            'Paid': 'ƒê√£ nh·∫≠n ti·ªÅn',           // Ng∆∞·ªùi b√°n x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ti·ªÅn
            'Completed': 'Ho√†n th√†nh',        // Ng∆∞·ªùi mua x√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë√∫ng h√†ng
            'Cancelled': 'ƒê√£ h·ªßy',            // ƒê∆°n h√†ng b·ªã h·ªßy
            // Legacy support (lowercase)
            'pending': 'Ch·ªù x√°c nh·∫≠n',
            'confirmed': 'ƒê√£ x√°c nh·∫≠n h√†ng',
            'paid': 'ƒê√£ nh·∫≠n ti·ªÅn',
            'completed': 'Ho√†n th√†nh',
            'cancelled': 'ƒê√£ h·ªßy'
        };
        return statusMap[status] || status;
    }

    getStatusColor(status) {
        const colorMap = {
            'Pending': 'warning',     // V√†ng - ch·ªù x·ª≠ l√Ω
            'Confirmed': 'info',      // Xanh d∆∞∆°ng - ƒë√£ x√°c nh·∫≠n
            'Paid': 'primary',        // Xanh ƒë·∫≠m - ƒë√£ thanh to√°n
            'Completed': 'success',   // Xanh l√° - ho√†n th√†nh
            'Cancelled': 'danger',    // ƒê·ªè - ƒë√£ h·ªßy
            // Legacy support (lowercase)
            'pending': 'warning',
            'confirmed': 'info',
            'paid': 'primary',
            'completed': 'success',
            'cancelled': 'danger'
        };
        return colorMap[status] || 'secondary';
    }

    getPaymentMethodText(method) {
        const methodMap = {
            'cod': 'Thanh to√°n khi nh·∫≠n h√†ng',
            'banking': 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
            'ewallet': 'V√≠ ƒëi·ªán t·ª≠',
            'card': 'Th·∫ª t√≠n d·ª•ng'
        };
        return methodMap[method] || method;
    }

    formatCurrency(amount) {
        if (!amount) return '0 ‚Ç´';
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        return new Date(dateString).toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    getTimeAgo(dateString) {
        if (!dateString) return 'N/A';

        const now = new Date();
        const date = new Date(dateString);
        const diffInSeconds = Math.floor((now - date) / 1000);

        if (diffInSeconds < 60) return 'V·ª´a xong';
        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
        if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)} ng√†y tr∆∞·ªõc`;

        return this.formatDate(dateString);
    }

    // Admin Methods
    // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng (Admin)
    async getAllOrders(page = 1, pageSize = 20, filters = {}) {
        try {
            console.log('üîç Fetching all orders (Admin):', { page, pageSize, filters });

            // X√¢y d·ª±ng query parameters
            const queryParams = new URLSearchParams({
                page: page.toString(),
                pageSize: pageSize.toString()
            });

            const response = await apiService.get(`${API_ENDPOINTS.ORDER.GET_ALL_ADMIN}?${queryParams}`);
            console.log('üìã Admin orders response:', response);

            const responseData = response.data || response;
            const ordersData = responseData.data || responseData.items || responseData;

            // Enrich data for display
            let enrichedData = ordersData;
            if (Array.isArray(ordersData)) {
                enrichedData = await this.enrichOrderData(ordersData);
            } else if (ordersData.items) {
                enrichedData = {
                    ...ordersData,
                    items: await this.enrichOrderData(ordersData.items)
                };
            }

            return {
                success: true,
                data: enrichedData,
                message: 'L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error getting all orders:', error);

            // Fallback v·ªõi mock data cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock data for development');
                return {
                    success: true,
                    data: this.getMockAdminOrders(),
                    message: 'S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u - API ch∆∞a s·∫µn s√†ng'
                };
            }

            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng');
        }
    }

    // L·ªçc ƒë∆°n h√†ng (Admin)
    async filterAllOrders(filterData) {
        try {
            console.log('üîç Filtering all orders (Admin):', filterData);
            const response = await apiService.post(API_ENDPOINTS.ORDER.FILTER_ORDERS, filterData);
            console.log('üìã Admin filter response:', response);

            const responseData = response.data || response;
            const ordersData = responseData.data || responseData.items || responseData;

            // Enrich data for display
            let enrichedData = ordersData;
            if (Array.isArray(ordersData)) {
                enrichedData = await this.enrichOrderData(ordersData);
            } else if (ordersData.items) {
                enrichedData = {
                    ...ordersData,
                    items: await this.enrichOrderData(ordersData.items)
                };
            }

            return {
                success: true,
                data: enrichedData,
                message: 'L·ªçc ƒë∆°n h√†ng th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error filtering all orders:', error);

            // Fallback v·ªõi mock data cho testing
            if (process.env.NODE_ENV === 'development') {
                console.warn('üîÑ Using mock data for development');
                return {
                    success: true,
                    data: this.getMockAdminOrders(),
                    message: 'S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u - API ch∆∞a s·∫µn s√†ng'
                };
            }

            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·ªçc ƒë∆°n h√†ng');
        }
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    async updateOrderStatus(orderId, status) {
        try {
            console.log('üîÑ Updating order status:', { orderId, status });
            const response = await apiService.put(API_ENDPOINTS.ORDER.UPDATE_STATUS(orderId), { status });
            console.log('üîÑ Update status response:', response);

            return {
                success: true,
                data: response.data,
                message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error updating order status:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
        }
    }

    // X·ª≠ l√Ω h√†ng lo·∫°t - Ho√†n th√†nh nhi·ªÅu ƒë∆°n h√†ng
    async bulkCompleteOrders(orderIds) {
        try {
            console.log('‚úÖ Bulk completing orders:', orderIds);
            const response = await apiService.post(API_ENDPOINTS.ORDER.BULK_COMPLETE, { orderIds });
            console.log('‚úÖ Bulk complete response:', response);

            return {
                success: true,
                data: response.data,
                message: `ƒê√£ ho√†n th√†nh ${orderIds.length} ƒë∆°n h√†ng`
            };
        } catch (error) {
            console.error('‚ùå Error bulk completing orders:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ ho√†n th√†nh h√†ng lo·∫°t');
        }
    }

    // X·ª≠ l√Ω h√†ng lo·∫°t - H·ªßy nhi·ªÅu ƒë∆°n h√†ng
    async bulkCancelOrders(orderIds) {
        try {
            console.log('‚ùå Bulk cancelling orders:', orderIds);
            const response = await apiService.post(API_ENDPOINTS.ORDER.BULK_CANCEL, { orderIds });
            console.log('‚ùå Bulk cancel response:', response);

            return {
                success: true,
                data: response.data,
                message: `ƒê√£ h·ªßy ${orderIds.length} ƒë∆°n h√†ng`
            };
        } catch (error) {
            console.error('‚ùå Error bulk cancelling orders:', error);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy h√†ng lo·∫°t');
        }
    }

    // Th·ªëng k√™ ƒë∆°n h√†ng (Admin)
    async getOrderStatistics() {
        try {
            console.log('üìä Fetching order statistics');

            // V√¨ backend c√≥ th·ªÉ ch∆∞a c√≥ endpoint th·ªëng k√™, ta t√≠nh t·ª´ d·ªØ li·ªáu hi·ªán c√≥
            const allOrdersResponse = await this.getAllOrders(1, 1000); // L·∫•y nhi·ªÅu ƒë·ªÉ t√≠nh to√°n
            const orders = allOrdersResponse.data.items || allOrdersResponse.data || [];

            // L·ªçc ƒë∆°n h√†ng ƒë√£ thanh to√°n (bao g·ªìm Paid, Completed)
            const paidOrders = orders.filter(o => ['Paid', 'Completed'].includes(o.status));
            
            // T√≠nh doanh thu theo th·ªùi gian
            const today = new Date();
            const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            const startOfToday = new Date(today.getFullYear(), today.getMonth(), today.getDate());

            // Doanh thu h√¥m nay
            const todayRevenue = paidOrders
                .filter(o => {
                    const orderDate = new Date(o.createdAt);
                    return orderDate >= startOfToday;
                })
                .reduce((sum, order) => sum + (order.totalAmount || 0), 0);

            // Doanh thu th√°ng n√†y
            const monthlyRevenue = paidOrders
                .filter(o => {
                    const orderDate = new Date(o.createdAt);
                    return orderDate >= startOfMonth;
                })
                .reduce((sum, order) => sum + (order.totalAmount || 0), 0);

            // T·ªïng doanh thu t·∫•t c·∫£ th·ªùi gian
            const totalRevenue = paidOrders
                .reduce((sum, order) => sum + (order.totalAmount || 0), 0);

            // Ph√¢n lo·∫°i doanh thu theo lo·∫°i ph√≠ (gi·∫£ s·ª≠ c√≥ th√¥ng tin v·ªÅ ph√≠ trong ƒë∆°n h√†ng)
            const revenueBreakdown = {
                productRevenue: 0,      // Doanh thu t·ª´ s·∫£n ph·∫©m
                shippingFee: 0,         // Ph√≠ v·∫≠n chuy·ªÉn
                serviceFee: 0,          // Ph√≠ d·ªãch v·ª•
                platformFee: 0,         // Ph√≠ n·ªÅn t·∫£ng
                other: 0                // Ph√≠ kh√°c
            };

            // T√≠nh ph√¢n lo·∫°i doanh thu (t·∫°m th·ªùi ∆∞·ªõc t√≠nh)
            paidOrders.forEach(order => {
                const orderAmount = order.totalAmount || 0;
                
                // ∆Ø·ªõc t√≠nh ph√¢n b·ªï (c√≥ th·ªÉ thay ƒë·ªïi theo logic th·ª±c t·∫ø)
                revenueBreakdown.productRevenue += Math.round(orderAmount * 0.85); // 85% l√† ti·ªÅn h√†ng
                revenueBreakdown.shippingFee += Math.round(orderAmount * 0.08);    // 8% ph√≠ ship
                revenueBreakdown.serviceFee += Math.round(orderAmount * 0.05);     // 5% ph√≠ d·ªãch v·ª•
                revenueBreakdown.platformFee += Math.round(orderAmount * 0.02);    // 2% ph√≠ n·ªÅn t·∫£ng
            });

            const stats = {
                totalOrders: orders.length,
                pendingOrders: orders.filter(o => ['Pending', 'Confirmed', 'Preparing', 'Delivering'].includes(o.status)).length,
                completedOrders: orders.filter(o => o.status === 'Completed').length,
                cancelledOrders: orders.filter(o => o.status === 'Cancelled').length,
                paidOrders: paidOrders.length,
                
                // Doanh thu
                totalRevenue,
                monthlyRevenue,
                todayRevenue,
                averageOrderValue: paidOrders.length > 0 ? Math.round(totalRevenue / paidOrders.length) : 0,
                
                // Ph√¢n lo·∫°i doanh thu
                revenueBreakdown,
                
                // T·ª∑ l·ªá
                completionRate: orders.length > 0 ? Math.round((orders.filter(o => o.status === 'Completed').length / orders.length) * 100) : 0,
                paymentRate: orders.length > 0 ? Math.round((paidOrders.length / orders.length) * 100) : 0
            };

            console.log('üìä Statistics calculated:', stats);

            return {
                success: true,
                data: stats,
                message: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('‚ùå Error getting order statistics:', error);

            // Fallback v·ªõi mock stats
            return {
                success: true,
                data: {
                    totalOrders: 156,
                    pendingOrders: 23,
                    completedOrders: 98,
                    cancelledOrders: 12,
                    paidOrders: 110,
                    totalRevenue: 15600000,
                    monthlyRevenue: 8500000,
                    todayRevenue: 2850000,
                    averageOrderValue: 141818,
                    revenueBreakdown: {
                        productRevenue: 13260000,
                        shippingFee: 1248000,
                        serviceFee: 780000,
                        platformFee: 312000,
                        other: 0
                    },
                    completionRate: 63,
                    paymentRate: 71
                },
                message: 'S·ª≠ d·ª•ng d·ªØ li·ªáu th·ªëng k√™ m·∫´u'
            };
        }
    }

    // Mock data cho Admin
    getMockAdminOrders() {
        return {
            items: [
                {
                    id: '1',
                    buyerId: 'buyer1',
                    sellerId: 'seller1',
                    buyerName: 'Nguy·ªÖn VƒÉn A',
                    buyerPhone: '0912345678',
                    sellerName: 'C·ª≠a h√†ng ABC',
                    totalAmount: 250000,
                    deliveryAddress: '123 Nguy·ªÖn VƒÉn Linh, Qu·∫≠n 7, TP.HCM',
                    status: 'Processing',
                    paymentStatus: 'Paid',
                    createdAt: '2024-01-15T10:30:00Z',
                    updatedAt: '2024-01-15T11:00:00Z',
                    items: [
                        {
                            productId: 'prod1',
                            productName: 'C√† chua',
                            productImageUrl: '/images/tomato.jpg',
                            productUnitName: 'kg',
                            quantity: 2,
                            priceAtPurchase: 25000
                        },
                        {
                            productId: 'prod2',
                            productName: 'C√† r·ªët',
                            productImageUrl: '/images/carrot.jpg',
                            productUnitName: 'kg',
                            quantity: 1,
                            priceAtPurchase: 30000
                        }
                    ]
                },
                {
                    id: '2',
                    buyerId: 'buyer2',
                    sellerId: 'seller2',
                    buyerName: 'Tr·∫ßn Th·ªã B',
                    buyerPhone: '0987654321',
                    sellerName: 'C·ª≠a h√†ng XYZ',
                    totalAmount: 180000,
                    deliveryAddress: '456 L√™ VƒÉn Vi·ªát, Qu·∫≠n 9, TP.HCM',
                    status: 'Completed',
                    paymentStatus: 'Paid',
                    createdAt: '2024-01-14T14:20:00Z',
                    updatedAt: '2024-01-15T09:15:00Z',
                    items: [
                        {
                            productId: 'prod3',
                            productName: 'Th·ªãt b√≤',
                            productImageUrl: '/images/beef.jpg',
                            productUnitName: 'kg',
                            quantity: 1,
                            priceAtPurchase: 180000
                        }
                    ]
                },
                {
                    id: '3',
                    buyerId: 'buyer3',
                    sellerId: 'seller1',
                    buyerName: 'L√™ VƒÉn C',
                    buyerPhone: '0345678901',
                    sellerName: 'C·ª≠a h√†ng ABC',
                    totalAmount: 95000,
                    deliveryAddress: '789 V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM',
                    status: 'Pending',
                    paymentStatus: 'Pending',
                    createdAt: '2024-01-15T16:45:00Z',
                    updatedAt: '2024-01-15T16:45:00Z',
                    items: [
                        {
                            productId: 'prod4',
                            productName: 'Rau mu·ªëng',
                            productImageUrl: '/images/spinach.jpg',
                            productUnitName: 'b√≥',
                            quantity: 5,
                            priceAtPurchase: 8000
                        },
                        {
                            productId: 'prod5',
                            productName: 'C·∫£i ng·ªçt',
                            productImageUrl: '/images/cabbage.jpg',
                            productUnitName: 'b√≥',
                            quantity: 7,
                            priceAtPurchase: 5000
                        }
                    ]
                }
            ],
            totalCount: 156,
            page: 1,
            pageSize: 20,
            totalPages: 8,
            hasPrevious: false,
            hasNext: true
        };
    }

    // ƒê·∫∑t h√†ng t·ª´ gi·ªè h√†ng
    async placeOrdersFromCart(orderData) {
        try {
            console.log('üõí Placing orders from cart:', orderData);
            
            // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (!orderData.buyerId) {
                throw new Error('Thi·∫øu th√¥ng tin ng∆∞·ªùi mua');
            }
            
            if (!orderData.cartItems || orderData.cartItems.length === 0) {
                throw new Error('Gi·ªè h√†ng tr·ªëng');
            }

            // Validate t·ª´ng s·∫£n ph·∫©m trong gi·ªè h√†ng
            for (const item of orderData.cartItems) {
                if (!item.quantity || item.quantity <= 0) {
                    throw new Error(`S·ªë l∆∞·ª£ng s·∫£n ph·∫©m "${item.product?.name || 'Unknown'}" ph·∫£i l·ªõn h∆°n 0`);
                }
                
                if (!item.product?.price || item.product.price <= 0) {
                    throw new Error(`Gi√° s·∫£n ph·∫©m "${item.product?.name || 'Unknown'}" kh√¥ng h·ª£p l·ªá`);
                }

                // Ki·ªÉm tra stock quantity
                if (item.product.stockQuantity > 0 && item.quantity > item.product.stockQuantity) {
                    throw new Error(`S·∫£n ph·∫©m "${item.product.name}" ch·ªâ c√≤n ${item.product.stockQuantity} ${item.product.unit} trong kho`);
                }

                // Ki·ªÉm tra minimum quantity
                if (item.product.minimumQuantity && item.quantity < item.product.minimumQuantity) {
                    throw new Error(`S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu cho "${item.product.name}" l√† ${item.product.minimumQuantity} ${item.product.unit}`);
                }
            }

            const response = await apiService.post(API_ENDPOINTS.ORDER.PLACE_FROM_CART, orderData);
            
            if (response.success) {
                console.log('‚úÖ Orders placed successfully:', response.data);
                return {
                    success: true,
                    data: response.data,
                    message: response.message || `ƒê√£ t·∫°o th√†nh c√¥ng ${response.data.orderCount} ƒë∆°n h√†ng`
                };
            } else {
                throw new Error(response.message || 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng');
            }
        } catch (error) {
            console.error('‚ùå Error placing orders from cart:', error);
            
            // Fallback v·ªõi mock data cho testing
            if (process.env.NODE_ENV === 'development' && error.message.includes('Network Error')) {
                console.warn('üîÑ Using mock response for development');
                return this.getMockPlaceOrderResponse(orderData);
            }
            
            throw new Error(error.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
        }
    }

    // Mock response cho development
    getMockPlaceOrderResponse(orderData) {
        // Nh√≥m cart items theo store
        const groupedByStore = orderData.cartItems.reduce((acc, item) => {
            const storeId = item.product.storeId || 'store_1';
            const storeName = item.product.storeName || 'Unknown Store';
            
            if (!acc[storeId]) {
                acc[storeId] = {
                    storeId,
                    storeName,
                    items: [],
                    totalAmount: 0
                };
            }
            
            acc[storeId].items.push(item);
            acc[storeId].totalAmount += item.product.price * item.quantity;
            
            return acc;
        }, {});

        const stores = Object.values(groupedByStore);
        const totalAmount = stores.reduce((sum, store) => sum + store.totalAmount, 0);
        
        const mockOrders = stores.map((store, index) => ({
            id: `mock_order_${Date.now()}_${index}`,
            buyerId: orderData.buyerId,
            sellerId: `seller_${store.storeId}`,
            storeName: store.storeName,
            totalAmount: store.totalAmount,
            status: 'Pending',
            paymentStatus: 'Pending',
            notes: orderData.notes || '',
            createdAt: new Date().toISOString(),
            items: store.items.map(item => ({
                productId: item.productId,
                productName: item.product.name,
                productImageUrl: item.product.images?.split(',')[0] || '',
                productUnitName: item.product.unit,
                quantity: item.quantity,
                priceAtPurchase: item.product.price
            }))
        }));

        return {
            success: true,
            message: `ƒê√£ t·∫°o th√†nh c√¥ng ${stores.length} ƒë∆°n h√†ng t·ª´ ${stores.length} c·ª≠a h√†ng kh√°c nhau (Mock)`,
            data: {
                orderCount: stores.length,
                totalAmount: totalAmount,
                orders: mockOrders
            }
        };
    }
}

const orderService = new OrderService();
export default orderService;
