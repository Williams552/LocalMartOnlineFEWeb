// Notification Service
import apiService from './apiService';

const notificationService = {
    // Get all notifications for seller
    getNotifications: async (page = 1, limit = 20) => {
        try {
            const response = await apiService.get(`/api/seller/notifications?page=${page}&limit=${limit}`);
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Using mock data due to API error:', error.message);
            return getMockNotifications(page, limit);
        }
    },

    // Get unread notification count
    getUnreadCount: async () => {
        try {
            const response = await apiService.get('/api/seller/notifications/unread-count');
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Using mock unread count due to API error:', error.message);
            return { count: Math.floor(Math.random() * 10) + 1 };
        }
    },

    // Mark notification as read
    markAsRead: async (notificationId) => {
        try {
            const response = await apiService.patch(`/api/seller/notifications/${notificationId}/read`, {});
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Mock marking as read due to API error:', error.message);
            return { success: true, id: notificationId };
        }
    },

    // Mark all notifications as read
    markAllAsRead: async () => {
        try {
            const response = await apiService.patch('/api/seller/notifications/mark-all-read', {});
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Mock marking all as read due to API error:', error.message);
            return { success: true, count: 0 };
        }
    },

    // Delete notification
    deleteNotification: async (notificationId) => {
        try {
            const response = await apiService.delete(`/api/seller/notifications/${notificationId}`);
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Mock delete due to API error:', error.message);
            return { success: true, id: notificationId };
        }
    },

    // Get notification settings
    getSettings: async () => {
        try {
            const response = await apiService.get('/api/seller/notification-settings');
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Using mock settings due to API error:', error.message);
            return getMockNotificationSettings();
        }
    },

    // Update notification settings
    updateSettings: async (settings) => {
        try {
            const response = await apiService.put('/api/seller/notification-settings', settings);
            return response;
        } catch (error) {
            console.warn('üîî Notifications: Mock update settings due to API error:', error.message);
            return { success: true, settings };
        }
    },

    // Real-time notification listener (WebSocket simulation)
    startRealTimeListener: (callback) => {
        // Simulate real-time notifications
        const interval = setInterval(() => {
            if (Math.random() < 0.1) { // 10% chance every 30 seconds
                const mockNotification = generateMockNotification();
                callback(mockNotification);
            }
        }, 30000);

        return () => clearInterval(interval);
    }
};

// Mock data generators
const getMockNotifications = (page, limit) => {
    const notificationTypes = [
        {
            type: 'new_order',
            title: 'ƒê∆°n h√†ng m·ªõi',
            icon: 'üõí',
            color: 'bg-green-100 text-green-800',
            priority: 'high'
        },
        {
            type: 'payment_update',
            title: 'C·∫≠p nh·∫≠t thanh to√°n',
            icon: 'üí≥',
            color: 'bg-blue-100 text-blue-800',
            priority: 'medium'
        },
        {
            type: 'system_message',
            title: 'Th√¥ng b√°o h·ªá th·ªëng',
            icon: '‚öôÔ∏è',
            color: 'bg-gray-100 text-gray-800',
            priority: 'low'
        },
        {
            type: 'customer_message',
            title: 'Tin nh·∫Øn kh√°ch h√†ng',
            icon: 'üí¨',
            color: 'bg-purple-100 text-purple-800',
            priority: 'high'
        },
        {
            type: 'product_review',
            title: 'ƒê√°nh gi√° s·∫£n ph·∫©m',
            icon: '‚≠ê',
            color: 'bg-yellow-100 text-yellow-800',
            priority: 'medium'
        },
        {
            type: 'inventory_alert',
            title: 'C·∫£nh b√°o t·ªìn kho',
            icon: 'üì¶',
            color: 'bg-red-100 text-red-800',
            priority: 'high'
        }
    ];

    const notifications = [];
    const totalNotifications = 45;
    const startIndex = (page - 1) * limit;

    for (let i = 0; i < limit && (startIndex + i) < totalNotifications; i++) {
        const typeIndex = Math.floor(Math.random() * notificationTypes.length);
        const type = notificationTypes[typeIndex];
        const isRead = Math.random() > 0.4; // 60% chance of being read

        const notification = {
            id: startIndex + i + 1,
            type: type.type,
            title: type.title,
            message: generateNotificationMessage(type.type),
            icon: type.icon,
            color: type.color,
            priority: type.priority,
            isRead,
            createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),
            data: generateNotificationData(type.type)
        };

        notifications.push(notification);
    }

    return {
        data: notifications.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)),
        pagination: {
            page,
            limit,
            total: totalNotifications,
            totalPages: Math.ceil(totalNotifications / limit),
            hasNext: page < Math.ceil(totalNotifications / limit),
            hasPrev: page > 1
        }
    };
};

const generateNotificationMessage = (type) => {
    const messages = {
        new_order: [
            'B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi t·ª´ kh√°ch h√†ng Nguy·ªÖn VƒÉn A',
            'ƒê∆°n h√†ng #LM12345 ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng',
            'Kh√°ch h√†ng Tr·∫ßn Th·ªã B v·ª´a ƒë·∫∑t 3 s·∫£n ph·∫©m',
            'ƒê∆°n h√†ng tr·ªã gi√° 850,000 VNƒê c·∫ßn ƒë∆∞·ª£c x√°c nh·∫≠n'
        ],
        payment_update: [
            'Thanh to√°n ƒë∆°n h√†ng #LM12345 ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
            'B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 1,200,000 VNƒê t·ª´ ƒë∆°n h√†ng #LM12346',
            'Thanh to√°n b·ªã t·ª´ ch·ªëi cho ƒë∆°n h√†ng #LM12347',
            'Ho√†n ti·ªÅn 150,000 VNƒê ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω'
        ],
        system_message: [
            'H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ t·ª´ 2:00 - 4:00 s√°ng mai',
            'C·∫≠p nh·∫≠t ch√≠nh s√°ch m·ªõi v·ªÅ ph√≠ giao d·ªãch',
            'T√≠nh nƒÉng m·ªõi: B√°o c√°o analytics ƒë√£ ƒë∆∞·ª£c th√™m',
            'Thay ƒë·ªïi quy ƒë·ªãnh v·ªÅ ƒë√°nh gi√° s·∫£n ph·∫©m'
        ],
        customer_message: [
            'Kh√°ch h√†ng L√™ VƒÉn C ƒë√£ g·ª≠i tin nh·∫Øn cho b·∫°n',
            'C√¢u h·ªèi m·ªõi v·ªÅ s·∫£n ph·∫©m "Rau c·∫£i xanh h·ªØu c∆°"',
            'Kh√°ch h√†ng y√™u c·∫ßu h·ªó tr·ª£ v·ªÅ ƒë∆°n h√†ng #LM12348',
            'Ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng v·ªÅ ch·∫•t l∆∞·ª£ng d·ªãch v·ª•'
        ],
        product_review: [
            'S·∫£n ph·∫©m "N∆∞·ªõc cam t∆∞∆°i" nh·∫≠n ƒë∆∞·ª£c ƒë√°nh gi√° 5 sao',
            'ƒê√°nh gi√° m·ªõi cho "B√°nh quy b∆°" - 4 sao',
            'Kh√°ch h√†ng ƒë·ªÉ l·∫°i b√¨nh lu·∫≠n t√≠ch c·ª±c',
            'C·∫ßn ph·∫£n h·ªìi ƒë√°nh gi√° 2 sao cho s·∫£n ph·∫©m c·ªßa b·∫°n'
        ],
        inventory_alert: [
            'S·∫£n ph·∫©m "M√¨ g√≥i H·∫£o H·∫£o" s·∫Øp h·∫øt h√†ng (c√≤n 5 s·∫£n ph·∫©m)',
            'C·∫£nh b√°o: 3 s·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng trong kho',
            'S·∫£n ph·∫©m "N∆∞·ªõc m·∫Øm Ph√∫ Qu·ªëc" c·∫ßn nh·∫≠p th√™m h√†ng',
            'Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho cho danh m·ª•c "ƒê·ªì u·ªëng"'
        ]
    };

    const typeMessages = messages[type] || ['Th√¥ng b√°o chung'];
    return typeMessages[Math.floor(Math.random() * typeMessages.length)];
};

const generateNotificationData = (type) => {
    const baseData = {
        new_order: {
            orderId: `LM${Math.floor(Math.random() * 100000)}`,
            customerName: ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'L√™ VƒÉn C', 'Ph·∫°m Th·ªã D'][Math.floor(Math.random() * 4)],
            amount: Math.floor(Math.random() * 2000000) + 100000,
            itemCount: Math.floor(Math.random() * 5) + 1
        },
        payment_update: {
            orderId: `LM${Math.floor(Math.random() * 100000)}`,
            amount: Math.floor(Math.random() * 2000000) + 100000,
            status: ['completed', 'failed', 'refunded'][Math.floor(Math.random() * 3)]
        },
        system_message: {
            category: ['maintenance', 'policy', 'feature', 'announcement'][Math.floor(Math.random() * 4)],
            url: '/seller/system-updates'
        },
        customer_message: {
            customerId: Math.floor(Math.random() * 1000) + 1,
            customerName: ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'L√™ VƒÉn C', 'Ph·∫°m Th·ªã D'][Math.floor(Math.random() * 4)],
            subject: ['H·ªèi v·ªÅ s·∫£n ph·∫©m', 'H·ªó tr·ª£ ƒë∆°n h√†ng', 'Ph·∫£n h·ªìi d·ªãch v·ª•'][Math.floor(Math.random() * 3)]
        },
        product_review: {
            productId: Math.floor(Math.random() * 100) + 1,
            productName: ['Rau c·∫£i xanh', 'N∆∞·ªõc cam t∆∞∆°i', 'B√°nh quy b∆°'][Math.floor(Math.random() * 3)],
            rating: Math.floor(Math.random() * 3) + 3, // 3-5 stars
            reviewId: Math.floor(Math.random() * 1000) + 1
        },
        inventory_alert: {
            productId: Math.floor(Math.random() * 100) + 1,
            productName: ['M√¨ g√≥i H·∫£o H·∫£o', 'N∆∞·ªõc m·∫Øm Ph√∫ Qu·ªëc', 'C√† ph√™ G7'][Math.floor(Math.random() * 3)],
            currentStock: Math.floor(Math.random() * 10),
            threshold: 10
        }
    };

    return baseData[type] || {};
};

const generateMockNotification = () => {
    const types = ['new_order', 'payment_update', 'customer_message'];
    const type = types[Math.floor(Math.random() * types.length)];
    const typeConfig = {
        new_order: { icon: 'üõí', color: 'bg-green-100 text-green-800', priority: 'high' },
        payment_update: { icon: 'üí≥', color: 'bg-blue-100 text-blue-800', priority: 'medium' },
        customer_message: { icon: 'üí¨', color: 'bg-purple-100 text-purple-800', priority: 'high' }
    };

    return {
        id: Date.now(),
        type,
        title: type === 'new_order' ? 'ƒê∆°n h√†ng m·ªõi' :
            type === 'payment_update' ? 'C·∫≠p nh·∫≠t thanh to√°n' : 'Tin nh·∫Øn m·ªõi',
        message: generateNotificationMessage(type),
        icon: typeConfig[type].icon,
        color: typeConfig[type].color,
        priority: typeConfig[type].priority,
        isRead: false,
        createdAt: new Date().toISOString(),
        data: generateNotificationData(type)
    };
};

const getMockNotificationSettings = () => {
    return {
        emailNotifications: true,
        pushNotifications: true,
        smsNotifications: false,
        preferences: {
            newOrders: true,
            paymentUpdates: true,
            systemMessages: true,
            customerMessages: true,
            productReviews: true,
            inventoryAlerts: true
        },
        quietHours: {
            enabled: true,
            startTime: '22:00',
            endTime: '08:00'
        },
        frequency: 'immediate' // immediate, hourly, daily
    };
};

export default notificationService;
