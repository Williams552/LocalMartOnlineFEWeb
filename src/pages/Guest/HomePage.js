import React, { useState, useEffect } from "react";
import Carousel from "../../components/Carousel/Carousel";
import ProductCard from "../../components/ProductCard/ProductCard";
import CategorySidebar from "../../components/Sidebar/CategorySidebar";
import ChatboxBot from "../../components/Chat/ChatBoxBot";
import productService from "../../services/productService";
import categoryService from "../../services/categoryService";
import marketService from "../../services/marketService";

const HomePage = () => {
    const [searchTerm, setSearchTerm] = useState("");
    const [selectedCategory, setSelectedCategory] = useState("T·∫•t c·∫£");
    const [selectedMarket, setSelectedMarket] = useState("T·∫•t c·∫£");
    const [products, setProducts] = useState([]);
    const [categories, setCategories] = useState([]);
    const [markets, setMarkets] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchLoading, setSearchLoading] = useState(false);

    // Debounce search to avoid too many API calls
    const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");

    useEffect(() => {
        const timer = setTimeout(() => {
            setDebouncedSearchTerm(searchTerm);
        }, 300);

        return () => clearTimeout(timer);
    }, [searchTerm]);

    // Fetch data from API on component mount
    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                setError(null);

                // Fetch products, categories and markets in parallel - use getProductsWithDetails for full info
                const [productsResult, categoriesResult, marketsResult] = await Promise.all([
                    productService.getProductsWithDetails({
                        pageSize: 100,
                        status: 'Active' // Only get active products
                    }),
                    categoryService.getActiveCategories(),
                    marketService.getActiveMarkets()
                ]);

                console.log('Products from API:', productsResult);
                console.log('Categories from API:', categoriesResult);
                console.log('Markets from API:', marketsResult);

                // Use API products data (already enhanced with store/seller info)
                const apiProducts = productsResult.items || [];

                // Products should already be formatted with seller and store info from getProductsWithDetails
                setProducts(apiProducts);

                // Set categories 
                setCategories(categoriesResult || []);

                // Set markets
                setMarkets(marketsResult || []);

            } catch (err) {
                console.error('Error fetching data:', err);
                setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.');
                setProducts([]);
                setCategories([]);
                setMarkets([]);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, []);

    // Search products when search term, category or market changes
    useEffect(() => {
        const searchProducts = async () => {
            try {
                setSearchLoading(true);

                // Build search parameters
                const searchParams = {
                    pageSize: 100,
                };

                // Add search keyword if provided
                if (debouncedSearchTerm) {
                    searchParams.keyword = debouncedSearchTerm;
                }

                // Add category filter if not "T·∫•t c·∫£"
                if (selectedCategory !== "T·∫•t c·∫£") {
                    const category = categories.find(cat => cat.name === selectedCategory);
                    if (category) {
                        searchParams.categoryId = category.id;
                    }
                }

                // Add market filter if not "T·∫•t c·∫£"
                if (selectedMarket !== "T·∫•t c·∫£") {
                    const market = markets.find(m => m.name === selectedMarket);
                    if (market) {
                        searchParams.marketId = market.id;
                    }
                }

                console.log('üîç Searching with params:', searchParams);

                let searchResult;

                // If we have search criteria, use search/filter APIs
                if (debouncedSearchTerm || selectedCategory !== "T·∫•t c·∫£" || selectedMarket !== "T·∫•t c·∫£") {
                    try {
                        // Try filter API first (more comprehensive)
                        searchResult = await productService.getProductsWithFilter(searchParams);
                        console.log('‚úÖ Filter API success:', searchResult);
                    } catch (filterError) {
                        console.warn('‚ùå Filter API failed, trying search API:', filterError);
                        try {
                            // Fallback to search API
                            searchResult = await productService.searchProductsAPI(searchParams);
                            console.log('‚úÖ Search API success:', searchResult);
                        } catch (searchError) {
                            console.warn('‚ùå Search API failed, using basic API:', searchError);
                            // Final fallback to basic API
                            searchResult = await productService.getProductsWithDetails(searchParams);
                            console.log('‚úÖ Basic API success:', searchResult);
                        }
                    }
                } else {
                    // No search criteria, load all products
                    searchResult = await productService.getProductsWithDetails({
                        pageSize: 100,
                        status: 'Active'
                    });
                }

                const searchResults = searchResult.items || [];
                console.log(`üì¶ Found ${searchResults.length} products`);
                setProducts(searchResults);

            } catch (err) {
                console.error('‚ùå Error searching products:', err);
                setError('Kh√¥ng th·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i.');
                setProducts([]);
            } finally {
                setSearchLoading(false);
            }
        };

        // Always search when categories and markets are loaded
        if (categories.length > 0 && markets.length > 0) {
            searchProducts();
        }
    }, [debouncedSearchTerm, selectedCategory, selectedMarket, categories, markets]);

    // Show filtered products count
    const displayProducts = products;
    const showingSearchResults = debouncedSearchTerm || selectedCategory !== "T·∫•t c·∫£" || selectedMarket !== "T·∫•t c·∫£";

    // Show loading state
    if (loading) {
        return (
            <div className="homepage bg-gray-50 min-h-screen pb-12">
                <Carousel />
                <main className="mt-8 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
                    <div className="text-center py-12">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-supply-primary mx-auto mb-4"></div>
                        <p className="text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m...</p>
                    </div>
                </main>
            </div>
        );
    }

    // Show error state
    if (error) {
        return (
            <div className="homepage bg-gray-50 min-h-screen pb-12">
                <Carousel />
                <main className="mt-8 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
                    <div className="text-center py-12">
                        <div className="text-6xl mb-4">‚ö†Ô∏è</div>
                        <p className="text-red-600 text-lg mb-4">{error}</p>
                        <button
                            onClick={() => window.location.reload()}
                            className="bg-supply-primary text-white px-4 py-2 rounded-lg hover:bg-supply-primary-dark transition-colors"
                        >
                            Th·ª≠ l·∫°i
                        </button>
                    </div>
                </main>
            </div>
        );
    }

    return (
        <div className="homepage bg-gray-50 min-h-screen pb-12">
            {/* Carousel Banner */}
            <Carousel />

            <main className="mt-8 px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
                {/* Title & Subtitle */}
                <section className="text-center mb-10">
                    <h1 className="text-4xl font-bold text-supply-primary mb-4">
                        ü•ï Ch√†o m·ª´ng ƒë·∫øn v·ªõi LocalMart! üåæ
                    </h1>
                    <p className="text-gray-700 text-xl leading-relaxed max-w-3xl mx-auto">
                        N∆°i k·∫øt n·ªëi ng∆∞·ªùi mua v√† ng∆∞·ªùi b√°n n√¥ng s·∫£n t∆∞∆°i s·∫°ch t·ª´ c√°c ch·ª£ ƒë·ªãa ph∆∞∆°ng.<br />
                        T√¨m ki·∫øm v√† mua b√°n d·ªÖ d√†ng, nhanh ch√≥ng, an to√†n.
                    </p>
                    <div className="mt-6 flex justify-center space-x-8 text-sm text-gray-600">
                        <div className="flex items-center space-x-2">
                            <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                            <span>T∆∞∆°i s·∫°ch t·ª´ ch·ª£</span>
                        </div>
                        <div className="flex items-center space-x-2">
                            <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                            <span>Giao h√†ng t·∫≠n n∆°i</span>
                        </div>
                        <div className="flex items-center space-x-2">
                            <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                            <span>Gi√° c·∫£ h·ª£p l√Ω</span>
                        </div>
                    </div>
                </section>



                {/* About Section */}
                <section className="mb-12 bg-white rounded-xl shadow-sm border p-8">
                    <div className="text-center mb-8">
                        <h2 className="text-3xl font-bold text-supply-primary mb-4">T·∫°i sao ch·ªçn LocalMart?</h2>
                        <p className="text-gray-600 max-w-2xl mx-auto">
                            Ch√∫ng t√¥i k·∫øt n·ªëi b·∫°n tr·ª±c ti·∫øp v·ªõi c√°c ti·ªÉu th∆∞∆°ng ƒë·ªãa ph∆∞∆°ng, mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m n√¥ng s·∫£n t∆∞∆°i ngon nh·∫•t.
                        </p>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div className="text-center p-6">
                            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <span className="text-2xl">ü•¨</span>
                            </div>
                            <h3 className="font-semibold text-lg mb-2">T∆∞∆°i s·∫°ch t·ª´ ch·ª£</h3>
                            <p className="text-gray-600 text-sm">S·∫£n ph·∫©m ƒë∆∞·ª£c thu ho·∫°ch v√† b√°n trong ng√†y, ƒë·∫£m b·∫£o ƒë·ªô t∆∞∆°i ngon t·ªëi ƒëa.</p>
                        </div>
                        <div className="text-center p-6">
                            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <span className="text-2xl">üöö</span>
                            </div>
                            <h3 className="font-semibold text-lg mb-2">Giao h√†ng nhanh</h3>
                            <p className="text-gray-600 text-sm">Giao h√†ng trong v√≤ng 2-4 gi·ªù, ƒë·∫£m b·∫£o s·∫£n ph·∫©m lu√¥n t∆∞∆°i khi ƒë·∫øn tay b·∫°n.</p>
                        </div>
                        <div className="text-center p-6">
                            <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                <span className="text-2xl">üí∞</span>
                            </div>
                            <h3 className="font-semibold text-lg mb-2">Gi√° c·∫£ h·ª£p l√Ω</h3>
                            <p className="text-gray-600 text-sm">Lo·∫°i b·ªè trung gian, mang ƒë·∫øn gi√° c·∫£ t·ªët nh·∫•t cho c·∫£ ng∆∞·ªùi mua v√† ng∆∞·ªùi b√°n.</p>
                        </div>
                    </div>
                </section>
                {/* Filter & Category Section */}
                <section className="mb-8">
                    <div className="bg-white rounded-xl shadow-sm border p-6">
                        <h3 className="text-lg font-semibold text-gray-800 mb-6 text-center">üîç T√¨m ki·∫øm s·∫£n ph·∫©m</h3>

                        {/* Category Bar */}
                        <div className="mb-6">
                            <CategorySidebar
                                onSelectCategory={setSelectedCategory}
                                selectedCategory={selectedCategory}
                                categories={categories}
                            />
                        </div>

                        {/* Search Input and Market Filter */}
                        <div className="flex flex-col lg:flex-row gap-4 justify-center">
                            {/* Search Input */}
                            <div className="flex-1 max-w-md">
                                <div className="relative">
                                    <input
                                        type="text"
                                        placeholder="T√¨m ki·∫øm rau c·ªß, tr√°i c√¢y, th·ªãt c√°..."
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                        className="w-full border border-gray-300 rounded-lg px-4 py-3 pr-10 shadow-sm focus:outline-none focus:ring-2 focus:ring-supply-primary focus:border-transparent text-sm"
                                    />
                                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                                        <svg className="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                        </svg>
                                    </div>
                                </div>
                            </div>

                            {/* Market Filter */}
                            <div className="flex-shrink-0 max-w-xs">
                                <div className="relative">
                                    <select
                                        value={selectedMarket}
                                        onChange={(e) => setSelectedMarket(e.target.value)}
                                        className="w-full border border-gray-300 rounded-lg px-4 py-3 shadow-sm focus:outline-none focus:ring-2 focus:ring-supply-primary focus:border-transparent text-sm bg-white"
                                    >
                                        <option value="T·∫•t c·∫£">üè™ T·∫•t c·∫£ ch·ª£</option>
                                        {markets.map((market) => (
                                            <option key={market.id} value={market.name}>
                                                üè™ {market.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                {/* Product Listing Section */}
                <section>
                    {/* Product Listing */}
                    <div className="w-full">
                        <div className="flex items-center justify-between mb-6">
                            <h3 className="text-2xl font-bold text-supply-primary">
                                üåü S·∫£n ph·∫©m n·ªïi b·∫≠t
                            </h3>
                            <div className="text-sm text-gray-600">
                                {showingSearchResults
                                    ? `T√¨m th·∫•y ${displayProducts.length} s·∫£n ph·∫©m${debouncedSearchTerm ? ` cho "${debouncedSearchTerm}"` : ''}${selectedCategory !== "T·∫•t c·∫£" ? ` trong "${selectedCategory}"` : ''}${selectedMarket !== "T·∫•t c·∫£" ? ` t·∫°i "${selectedMarket}"` : ''}`
                                    : `Hi·ªÉn th·ªã ${displayProducts.length} s·∫£n ph·∫©m`
                                }
                                {searchLoading && <span className="ml-2 text-supply-primary">ƒêang t√¨m ki·∫øm...</span>}
                            </div>
                        </div>
                        {displayProducts.length > 0 ? (
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                                {displayProducts.map((p) => (
                                    <ProductCard
                                        key={p.id}
                                        id={p.id}
                                        name={p.name}
                                        seller={p.seller}
                                        sellerId={p.sellerId}
                                        market={p.market}
                                        storeId={p.storeId}
                                        storeName={p.storeName}
                                        price={p.price}
                                        image={p.image}
                                        description={p.description}
                                        status={p.statusDisplay}
                                    />
                                ))}
                            </div>
                        ) : (
                            <div className="text-center py-12">
                                <div className="text-6xl mb-4">üîç</div>
                                <p className="text-gray-500 text-lg">
                                    {showingSearchResults
                                        ? 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.'
                                        : 'Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.'
                                    }
                                </p>
                                <p className="text-gray-400 text-sm mt-2">
                                    {showingSearchResults
                                        ? 'H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ch·ªçn danh m·ª•c kh√°c.'
                                        : 'H·ªá th·ªëng ƒëang c·∫≠p nh·∫≠t s·∫£n ph·∫©m.'
                                    }
                                </p>
                            </div>
                        )}
                    </div>
                </section>
            </main>

            {/* Chatbox Bot */}
            <ChatboxBot />
        </div>
    );
};

export default HomePage;
