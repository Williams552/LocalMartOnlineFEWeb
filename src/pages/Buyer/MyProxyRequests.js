import React, { useEffect, useState } from 'react';
import { FiUser, FiClock, FiPackage, FiMapPin, FiPhone, FiEye, FiCheck, FiX, FiShoppingCart, FiRefreshCw } from 'react-icons/fi';
import proxyRequestService from '../../services/proxyRequestService';
import '../../styles/proxy-requests.css';

const MyProxyRequests = () => {
    const [requests, setRequests] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState("");
    const [selectedRequest, setSelectedRequest] = useState(null);
    const [showProposalModal, setShowProposalModal] = useState(false);
    const [actionLoading, setActionLoading] = useState(false);
    const [actionError, setActionError] = useState("");
    const [actionSuccess, setActionSuccess] = useState("");
    const [showCancelModal, setShowCancelModal] = useState(false);
    const [showRejectModal, setShowRejectModal] = useState(false);
    const [cancelReason, setCancelReason] = useState("");
    const [rejectReason, setRejectReason] = useState("");
    const [selectedRequestForAction, setSelectedRequestForAction] = useState(null);

    useEffect(() => {
        fetchMyRequests();
    }, []);

    const fetchMyRequests = async () => {
        setLoading(true);
        setError("");
        try {
            const data = await proxyRequestService.getMyRequests();
            setRequests(data);
        } catch (err) {
            setError(err.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu");
        }
        setLoading(false);
    };

    const getStatusDisplay = (request) => {
        // S·ª≠ d·ª•ng currentPhase t·ª´ API response m·ªõi
        const displayPhase = request.currentPhase || request.status;
        const statusMap = {
            // Current phase values t·ª´ API
            'Ch∆∞a c√≥ Proxy nh·∫≠n': { text: 'ƒêang ch·ªù proxy shopper nh·∫≠n', color: 'bg-yellow-100 text-yellow-800', icon: '‚è≥' },
            'ƒêang so·∫°n ƒë∆°n': { text: 'Proxy ƒëang so·∫°n ƒë·ªÅ xu·∫•t', color: 'bg-blue-100 text-blue-800', icon: 'üìù' },
            'Ch·ªù duy·ªát': { text: 'C√≥ ƒë·ªÅ xu·∫•t, ch·ªù duy·ªát', color: 'bg-purple-100 text-purple-800', icon: 'üìã' },
            'ƒê√£ thanh to√°n': { text: 'ƒê√£ thanh to√°n, ƒëang mua h√†ng', color: 'bg-green-100 text-green-800', icon: 'üí≥' },
            'ƒêang mua h√†ng': { text: 'ƒêang mua h√†ng', color: 'bg-indigo-100 text-indigo-800', icon: 'üõí' },
            'ƒê√£ ho√†n th√†nh': { text: 'Ho√†n th√†nh', color: 'bg-green-100 text-green-800', icon: '‚úÖ' },
            'ƒê√£ h·ªßy': { text: 'ƒê√£ h·ªßy', color: 'bg-red-100 text-red-800', icon: '‚ùå' },
            'ƒê√£ h·∫øt h·∫°n': { text: 'ƒê√£ h·∫øt h·∫°n', color: 'bg-gray-100 text-gray-800', icon: '‚è∞' },
            
            // Fallback cho old statuses
            'Open': { text: 'ƒêang ch·ªù proxy shopper nh·∫≠n', color: 'bg-yellow-100 text-yellow-800', icon: '‚è≥' },
            'Locked': { text: 'ƒê√£ c√≥ proxy nh·∫≠n, ƒëang so·∫°n ƒë·ªÅ xu·∫•t', color: 'bg-blue-100 text-blue-800', icon: 'üîí' },
            'Draft': { text: 'Proxy ƒëang so·∫°n ƒë·ªÅ xu·∫•t', color: 'bg-blue-100 text-blue-800', icon: 'üìù' },
            'Proposed': { text: 'C√≥ ƒë·ªÅ xu·∫•t, ch·ªù duy·ªát', color: 'bg-purple-100 text-purple-800', icon: 'üìã' },
            'Paid': { text: 'ƒê√£ thanh to√°n, ƒëang mua h√†ng', color: 'bg-green-100 text-green-800', icon: 'üí≥' },
            'InProgress': { text: 'ƒêang mua h√†ng', color: 'bg-indigo-100 text-indigo-800', icon: 'üõí' },
            'Completed': { text: 'Ho√†n th√†nh', color: 'bg-green-100 text-green-800', icon: '‚úÖ' },
            'Cancelled': { text: 'ƒê√£ h·ªßy', color: 'bg-red-100 text-red-800', icon: '‚ùå' }
        };
        return statusMap[displayPhase] || { text: displayPhase, color: 'bg-gray-100 text-gray-800', icon: '‚ùì' };
    };

    const handleApproveProposal = async (requestId) => {
        setActionLoading(true);
        setActionError("");
        setActionSuccess("");
        try {
            await proxyRequestService.approveProposal(requestId);
            setActionSuccess("ƒê√£ duy·ªát ƒë·ªÅ xu·∫•t v√† thanh to√°n th√†nh c√¥ng!");
            await fetchMyRequests(); // Refresh data
            setShowProposalModal(false);
        } catch (err) {
            setActionError(err.message || "Kh√¥ng th·ªÉ duy·ªát ƒë·ªÅ xu·∫•t");
        }
        setActionLoading(false);
    };

    const handleConfirmDelivery = async (requestId) => {
        setActionLoading(true);
        setActionError("");
        setActionSuccess("");
        try {
            await proxyRequestService.confirmDelivery(requestId);
            setActionSuccess("ƒê√£ x√°c nh·∫≠n nh·∫≠n h√†ng!");
            await fetchMyRequests(); // Refresh data
        } catch (err) {
            setActionError(err.message || "Kh√¥ng th·ªÉ x√°c nh·∫≠n nh·∫≠n h√†ng");
        }
        setActionLoading(false);
    };

    const handleCancelRequest = async () => {
        if (!cancelReason.trim()) {
            setActionError("Vui l√≤ng nh·∫≠p l√Ω do h·ªßy y√™u c·∫ßu");
            return;
        }

        setActionLoading(true);
        setActionError("");
        setActionSuccess("");
        try {
            await proxyRequestService.cancelRequest(selectedRequestForAction.id, cancelReason);
            setActionSuccess("ƒê√£ h·ªßy y√™u c·∫ßu th√†nh c√¥ng!");
            await fetchMyRequests(); // Refresh data
            setShowCancelModal(false);
            setCancelReason("");
            setSelectedRequestForAction(null);
        } catch (err) {
            setActionError(err.message || "Kh√¥ng th·ªÉ h·ªßy y√™u c·∫ßu");
        }
        setActionLoading(false);
    };

    const handleRejectProposal = async () => {
        if (!rejectReason.trim()) {
            setActionError("Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi ƒë·ªÅ xu·∫•t");
            return;
        }

        setActionLoading(true);
        setActionError("");
        setActionSuccess("");
        try {
            // S·ª≠ d·ª•ng orderId t·ª´ proposal ho·∫∑c requestId
            const orderId = selectedRequestForAction.proposal?.orderId || selectedRequestForAction.id;
            await proxyRequestService.rejectProposal(orderId, rejectReason);
            setActionSuccess("ƒê√£ t·ª´ ch·ªëi ƒë·ªÅ xu·∫•t! Proxy shopper s·∫Ω l√™n ƒë∆°n l·∫°i.");
            await fetchMyRequests(); // Refresh data
            setShowRejectModal(false);
            setRejectReason("");
            setSelectedRequestForAction(null);
        } catch (err) {
            setActionError(err.message || "Kh√¥ng th·ªÉ t·ª´ ch·ªëi ƒë·ªÅ xu·∫•t");
        }
        setActionLoading(false);
    };

    const openCancelModal = (request) => {
        setSelectedRequestForAction(request);
        setShowCancelModal(true);
        setActionError("");
        setActionSuccess("");
    };

    const openRejectModal = (request) => {
        setSelectedRequestForAction(request);
        setShowRejectModal(true);
        setActionError("");
        setActionSuccess("");
    };

    const viewProposal = (request) => {
        setSelectedRequest(request);
        setShowProposalModal(true);
        setActionError("");
        setActionSuccess("");
    };

    if (loading) return <div className="p-8 text-center">ƒêang t·∫£i...</div>;
    if (error) return <div className="p-8 text-center text-red-600">{error}</div>;

    return (
        <div className="max-w-6xl mx-auto px-4 py-8">
            <div className="flex items-center justify-between mb-6">
                <h1 className="text-2xl font-bold text-supply-primary flex items-center">
                    <FiShoppingCart className="mr-2" />
                    Y√™u c·∫ßu ƒëi ch·ª£ gi√∫m c·ªßa t√¥i
                </h1>
                <button
                    onClick={fetchMyRequests}
                    className="px-4 py-2 bg-supply-primary text-white rounded hover:bg-supply-primary/90 flex items-center gap-2"
                    disabled={loading}
                >
                    <FiRefreshCw className={`text-sm ${loading ? 'animate-spin' : ''}`} />
                    {loading ? 'ƒêang t·∫£i...' : 'L√†m m·ªõi'}
                </button>
            </div>

            {requests.length === 0 ? (
                <div className="text-center py-12">
                    <FiPackage className="mx-auto text-6xl text-gray-300 mb-4" />
                    <p className="text-xl text-gray-500">B·∫°n ch∆∞a c√≥ y√™u c·∫ßu ƒëi ch·ª£ gi√∫m n√†o</p>
                </div>
            ) : (
                <div className="grid gap-6">
                    {requests.map((request) => {
                        const statusInfo = getStatusDisplay(request);
                        // S·ª≠ d·ª•ng API response m·ªõi
                        const requestStatus = request.status; // Request status: Open, Locked, Completed
                        const orderStatus = request.orderStatus; // Order status t·ª´ API: Draft, Proposed, Paid, InProgress, Completed
                        const currentPhase = request.currentPhase; // Current phase t·ª´ API
                        const hasOrder = request.hasOrder; // C√≥ order hay kh√¥ng
                                                
                        return (
                            <div key={request.id} className="bg-white rounded-lg shadow-md p-6 border border-gray-200">
                                <div className="flex justify-between items-start mb-4">
                                    <div className="flex-1">
                                        <div className="flex items-center gap-3 mb-2">
                                            <h3 className="text-lg font-semibold">Y√™u c·∫ßu #{request.id}</h3>
                                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${statusInfo.color} flex items-center gap-1`}>
                                                <span>{statusInfo.icon}</span>
                                                {statusInfo.text}
                                            </span>
                                        </div>
                                        <div className="flex items-center text-gray-600 text-sm mb-2">
                                            <FiClock className="mr-1" />
                                            T·∫°o l√∫c: {new Date(request.createdAt).toLocaleString('vi-VN')}
                                        </div>
                                        <div className="flex items-center text-gray-600 text-sm">
                                            <FiMapPin className="mr-1" />
                                            Giao ƒë·∫øn: {request.deliveryAddress}
                                        </div>
                                    </div>
                                </div>

                                {/* Th√¥ng tin proxy shopper */}
                                {request.partnerName && request.partnerRole === 'Proxy Shopper' && (
                                    <div className="bg-blue-50 rounded-lg p-4 mb-4">
                                        <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                                            <FiUser className="mr-1" />
                                            Ng∆∞·ªùi ƒëi ch·ª£ gi√πm
                                        </h4>
                                        <div className="text-blue-700">
                                            <div>T√™n: {request.partnerName}</div>
                                            {request.partnerEmail && (
                                                <div className="mt-1">
                                                    Email: {request.partnerEmail}
                                                </div>
                                            )}
                                            {request.partnerPhone && (
                                                <div className="flex items-center mt-1">
                                                    <FiPhone className="mr-1" />
                                                    {request.partnerPhone}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* S·∫£n ph·∫©m y√™u c·∫ßu */}
                                <div className="mb-4">
                                    <h4 className="font-medium mb-2 flex items-center">
                                        <FiPackage className="mr-1" />
                                        S·∫£n ph·∫©m y√™u c·∫ßu ({request.items?.length || 0} m·∫∑t h√†ng)
                                    </h4>
                                    <div className="bg-gray-50 rounded p-3">
                                        {request.items?.map((item, idx) => (
                                            <div key={idx} className="flex justify-between items-center py-1">
                                                <span className="font-medium">{item.name}</span>
                                                <span className="text-gray-600">{item.quantity} {item.unit}</span>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                {/* Th√¥ng tin ƒë∆°n h√†ng chi ti·∫øt (n·∫øu c√≥) */}
                                {request.hasOrder && request.orderId && (
                                    <div className="bg-green-50 rounded-lg p-4 mb-4">
                                        <h4 className="font-medium text-green-800 mb-3 flex items-center">
                                            <FiShoppingCart className="mr-1" />
                                            Th√¥ng tin ƒë∆°n h√†ng (#{request.orderId.slice(-8)})
                                        </h4>
                                        
                                        {/* Chi ti·∫øt s·∫£n ph·∫©m trong order */}
                                        {request.orderItems && request.orderItems.length > 0 && (
                                            <div className="mb-4">
                                                <h5 className="font-medium text-green-800 mb-2">S·∫£n ph·∫©m ƒë√£ ch·ªçn:</h5>
                                                <div className="space-y-2">
                                                    {request.orderItems.map((item, idx) => (
                                                        <div key={idx} className="bg-white rounded-lg p-3 border border-green-200">
                                                            <div className="flex justify-between items-start">
                                                                <div className="flex-1">
                                                                    <h6 className="font-semibold text-gray-800">{item.name}</h6>
                                                                    <div className="text-sm text-gray-600 mt-1">
                                                                        <div className="flex justify-between">
                                                                            <span>S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu:</span>
                                                                            <span className="font-medium">{item.minimumQuantity} {item.unitName}</span>
                                                                        </div>
                                                                        <div className="flex justify-between">
                                                                            <span>ƒê∆°n gi√°:</span>
                                                                            <span className="font-semibold text-green-600">
                                                                                {item.price?.toLocaleString()} ƒë/{item.unitName}
                                                                            </span>
                                                                        </div>
                                                                        <div className="flex justify-between">
                                                                            <span>Th√†nh ti·ªÅn:</span>
                                                                            <span className="font-bold text-green-700">
                                                                                {((item.price || 0) * (item.minimumQuantity || 0)).toLocaleString()} ƒë
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {/* T·ªïng k·∫øt chi ph√≠ */}
                                        {(request.totalAmount || request.proxyFee) && (
                                            <div className="text-green-700">
                                                <div className="flex justify-between items-center mb-1">
                                                    <span>T·ªïng ti·ªÅn s·∫£n ph·∫©m:</span>
                                                    <span className="font-semibold">
                                                        {(request.totalAmount || 0).toLocaleString()} ƒë
                                                    </span>
                                                </div>
                                                {request.proxyFee && (
                                                    <div className="flex justify-between items-center mb-1">
                                                        <span>Ph√≠ d·ªãch v·ª•:</span>
                                                        <span className="font-semibold">{request.proxyFee.toLocaleString()} ƒë</span>
                                                    </div>
                                                )}
                                                <div className="flex justify-between items-center font-bold text-lg pt-2 border-t border-green-200">
                                                    <span>T·ªïng c·ªông:</span>
                                                    <span>
                                                        {((request.totalAmount || 0) + (request.proxyFee || 0)).toLocaleString()} ƒë
                                                    </span>
                                                </div>
                                            </div>
                                        )}

                                        {/* ƒê·ªãa ch·ªâ giao h√†ng */}
                                        {request.deliveryAddress && (
                                            <div className="mt-3 pt-3 border-t border-green-200">
                                                <span className="font-medium text-green-800">ƒê·ªãa ch·ªâ giao h√†ng:</span>
                                                <p className="text-sm mt-1 text-green-700">{request.deliveryAddress}</p>
                                            </div>
                                        )}

                                        {/* Ghi ch√∫ */}
                                        {request.notes && (
                                            <div className="mt-3 pt-3 border-t border-green-200">
                                                <span className="font-medium text-green-800">Ghi ch√∫:</span>
                                                <p className="text-sm mt-1 text-green-700">{request.notes}</p>
                                            </div>
                                        )}

                                        {/* Proof Images */}
                                        {request.proofImages && (
                                            <div className="mt-3 pt-3 border-t border-green-200">
                                                <span className="font-medium text-green-800">H√¨nh ·∫£nh x√°c nh·∫≠n mua h√†ng:</span>
                                                <div className="mt-2">
                                                    <img
                                                        src={request.proofImages}
                                                        alt="Proof of purchase"
                                                        className="w-full max-w-md h-64 object-contain rounded-lg border bg-white cursor-pointer"
                                                        onClick={() => window.open(request.proofImages, '_blank')}
                                                    />
                                                </div>
                                            </div>
                                        )}

                                        {/* Th·ªùi gian ƒë∆°n h√†ng */}
                                        {request.orderCreatedAt && (
                                            <div className="mt-3 pt-3 border-t border-green-200">
                                                <span className="font-medium text-green-800">Th·ªùi gian t·∫°o ƒë∆°n:</span>
                                                <p className="text-sm mt-1 text-green-700">
                                                    {new Date(request.orderCreatedAt).toLocaleString('vi-VN')}
                                                </p>
                                                {request.orderUpdatedAt && request.orderUpdatedAt !== request.orderCreatedAt && (
                                                    <>
                                                        <span className="font-medium text-green-800">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:</span>
                                                        <p className="text-sm mt-1 text-green-700">
                                                            {new Date(request.orderUpdatedAt).toLocaleString('vi-VN')}
                                                        </p>
                                                    </>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                )}

                                {/* Th√¥ng tin ƒë·ªÅ xu·∫•t v·ªõi s·∫£n ph·∫©m chi ti·∫øt */}
                                {request.proposal && (
                                    <div className="bg-green-50 rounded-lg p-4 mb-4">
                                        <h4 className="font-medium text-green-800 mb-3">ƒê·ªÅ xu·∫•t t·ª´ Ng∆∞·ªùi ƒëi ch·ª£ gi√πm</h4>
                                        
                                        {/* Hi·ªÉn th·ªã s·∫£n ph·∫©m ƒë·ªÅ xu·∫•t chi ti·∫øt */}
                                        {request.proposal.proposedItems && request.proposal.proposedItems.length > 0 && (
                                            <div className="mb-4">
                                                <h5 className="font-medium text-green-800 mb-2">S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t:</h5>
                                                <div className="space-y-3">
                                                    {request.proposal.proposedItems.map((item, idx) => (
                                                        <div key={idx} className="bg-white rounded-lg p-3 border border-green-200">
                                                            <div className="flex items-start space-x-3">
                                                                {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
                                                                {item.imageUrls && item.imageUrls.length > 0 && (
                                                                    <div className="flex-shrink-0">
                                                                        <img 
                                                                            src={item.imageUrls[0]} 
                                                                            alt={item.name}
                                                                            className="w-16 h-16 object-cover rounded-lg border"
                                                                            onError={(e) => {
                                                                                e.target.src = '/placeholder-product.png'; // Fallback image
                                                                            }}
                                                                        />
                                                                    </div>
                                                                )}
                                                                
                                                                {/* Th√¥ng tin s·∫£n ph·∫©m */}
                                                                <div className="flex-1">
                                                                    <div className="flex justify-between items-start mb-1">
                                                                        <h6 className="font-semibold text-gray-800">{item.name}</h6>
                                                                        <span className={`px-2 py-1 rounded text-xs ${
                                                                            item.isAvailable 
                                                                                ? 'bg-green-100 text-green-800' 
                                                                                : 'bg-red-100 text-red-800'
                                                                        }`}>
                                                                            {item.isAvailable ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'}
                                                                        </span>
                                                                    </div>
                                                                    
                                                                    <div className="text-sm text-gray-600 space-y-1">
                                                                        <div className="flex justify-between">
                                                                            <span>S·ªë l∆∞·ª£ng:</span>
                                                                            <span className="font-medium">{item.quantity} {item.unit}</span>
                                                                        </div>
                                                                        <div className="flex justify-between">
                                                                            <span>ƒê∆°n gi√°:</span>
                                                                            <span className="font-semibold text-green-600">
                                                                                {item.price?.toLocaleString()} ƒë/{item.unit}
                                                                            </span>
                                                                        </div>
                                                                        <div className="flex justify-between">
                                                                            <span>Th√†nh ti·ªÅn:</span>
                                                                            <span className="font-bold text-green-700">
                                                                                {((item.price || 0) * (item.quantity || 0)).toLocaleString()} ƒë
                                                                            </span>
                                                                        </div>
                                                                        {item.storeName && (
                                                                            <div className="flex justify-between">
                                                                                <span>C·ª≠a h√†ng:</span>
                                                                                <span className="font-medium">{item.storeName}</span>
                                                                            </div>
                                                                        )}
                                                                        {item.storeRating && (
                                                                            <div className="flex justify-between">
                                                                                <span>ƒê√°nh gi√°:</span>
                                                                                <span className="flex items-center">
                                                                                    ‚≠ê {item.storeRating}/5
                                                                                </span>
                                                                            </div>
                                                                        )}
                                                                        {item.categoryName && (
                                                                            <div className="flex justify-between">
                                                                                <span>Danh m·ª•c:</span>
                                                                                <span className="text-blue-600">{item.categoryName}</span>
                                                                            </div>
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>
                                        )}

                                        {/* T·ªïng k·∫øt chi ph√≠ */}
                                        <div className="text-green-700">
                                            <div className="flex justify-between items-center mb-1">
                                                <span>T·ªïng ti·ªÅn s·∫£n ph·∫©m:</span>
                                                <span className="font-semibold">
                                                    {(request.proposal.totalAmount || request.proposal.totalProductPrice || 0).toLocaleString()} ƒë
                                                </span>
                                            </div>
                                            <div className="flex justify-between items-center mb-1">
                                                <span>Ph√≠ d·ªãch v·ª•:</span>
                                                <span className="font-semibold">{request.proposal.proxyFee?.toLocaleString()} ƒë</span>
                                            </div>
                                            <div className="flex justify-between items-center font-bold text-lg pt-2 border-t border-green-200">
                                                <span>T·ªïng c·ªông:</span>
                                                <span>
                                                    {((request.proposal.totalAmount || request.proposal.totalProductPrice || 0) + (request.proposal.proxyFee || 0)).toLocaleString()} ƒë
                                                </span>
                                            </div>
                                            {request.proposal.note && (
                                                <div className="mt-2 pt-2 border-t border-green-200">
                                                    <span className="font-medium">Ghi ch√∫:</span>
                                                    <p className="text-sm mt-1">{request.proposal.note}</p>
                                                </div>
                                            )}
                                            {request.proposal.createdAt && (
                                                <div className="mt-2 pt-2 border-t border-green-200">
                                                    <span className="font-medium">Th·ªùi gian ƒë·ªÅ xu·∫•t:</span>
                                                    <p className="text-sm mt-1">
                                                        {new Date(request.proposal.createdAt).toLocaleString('vi-VN')}
                                                    </p>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* N√∫t thao t√°c */}
                                <div className="flex gap-3 justify-end mt-4">
                                    {/* Hi·ªÉn th·ªã chi ti·∫øt order n·∫øu c√≥ */}
                                    {hasOrder && (
                                        <button
                                            onClick={() => viewProposal(request)}
                                            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 flex items-center gap-1"
                                        >
                                            <FiEye className="text-sm" />
                                            Xem chi ti·∫øt ƒë∆°n h√†ng
                                        </button>
                                    )}
                                    
                                    {/* N√∫t cho currentPhase = "Ch·ªù duy·ªát" */}
                                    {currentPhase === 'Ch·ªù duy·ªát' && (
                                        <>
                                            <button
                                                onClick={() => openRejectModal(request)}
                                                className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 flex items-center gap-1"
                                                disabled={actionLoading}
                                            >
                                                <FiX className="text-sm" />
                                                T·ª´ ch·ªëi & Y√™u c·∫ßu l√™n l·∫°i
                                            </button>
                                            <button
                                                onClick={() => handleApproveProposal(request.orderId || request.id)}
                                                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 flex items-center gap-1"
                                                disabled={actionLoading}
                                            >
                                                <FiCheck className="text-sm" />
                                                {actionLoading ? 'ƒêang x·ª≠ l√Ω...' : 'Duy·ªát & Thanh to√°n'}
                                            </button>
                                        </>
                                    )}
                                    
                                    {/* N√∫t cho currentPhase = "ƒê√£ thanh to√°n" ho·∫∑c "ƒêang mua h√†ng" */}
                                    {(currentPhase === 'ƒê√£ thanh to√°n' || currentPhase === 'ƒêang mua h√†ng') && (
                                        <button
                                            onClick={() => handleConfirmDelivery(request.orderId || request.id)}
                                            className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 flex items-center gap-1"
                                            disabled={actionLoading}
                                        >
                                            <FiCheck className="text-sm" />
                                            {actionLoading ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n nh·∫≠n h√†ng'}
                                        </button>
                                    )}
                                    
                                    {/* N√∫t cho currentPhase = "Ch∆∞a c√≥ Proxy nh·∫≠n" */}
                                    {currentPhase === 'Ch∆∞a c√≥ Proxy nh·∫≠n' && (
                                        <button
                                            onClick={() => openCancelModal(request)}
                                            className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 flex items-center gap-1"
                                            disabled={actionLoading}
                                        >
                                            <FiX className="text-sm" />
                                            H·ªßy y√™u c·∫ßu
                                        </button>
                                    )}

                                    {/* N√∫t l√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i */}
                                    <button
                                        onClick={fetchMyRequests}
                                        className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 flex items-center gap-1"
                                        disabled={loading}
                                    >
                                        <FiRefreshCw className={`text-sm ${loading ? 'animate-spin' : ''}`} />
                                        L√†m m·ªõi
                                    </button>
                                </div>

                                {/* Hi·ªÉn th·ªã th√¥ng b√°o l·ªói/th√†nh c√¥ng */}
                                {actionError && (
                                    <div className="mt-3 p-3 bg-red-100 border border-red-300 rounded text-red-700">
                                        {actionError}
                                    </div>
                                )}
                                {actionSuccess && (
                                    <div className="mt-3 p-3 bg-green-100 border border-green-300 rounded text-green-700">
                                        {actionSuccess}
                                    </div>
                                )}
                            </div>
                        );
                    })}
                </div>
            )}

            {/* Modal xem ƒë·ªÅ xu·∫•t chi ti·∫øt */}
            {showProposalModal && selectedRequest && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                        <div className="sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center">
                            <h3 className="text-xl font-bold">Chi ti·∫øt ƒë·ªÅ xu·∫•t - Y√™u c·∫ßu #{selectedRequest.id}</h3>
                            <button
                                onClick={() => setShowProposalModal(false)}
                                className="text-gray-400 hover:text-gray-600 text-2xl"
                            >
                                &times;
                            </button>
                        </div>
                        
                        <div className="p-6">
                            {/* Th√¥ng tin proxy shopper */}
                            <div className="mb-6">
                                <h4 className="font-semibold mb-3 flex items-center text-blue-800">
                                    <FiUser className="mr-2" />
                                    Ng∆∞·ªùi ƒëi ch·ª£ gi√πm
                                </h4>
                                <div className="bg-blue-50 rounded-lg p-4">
                                    <div>T√™n: {selectedRequest.proxyShopperName}</div>
                                    {selectedRequest.proxyShopperPhone && (
                                        <div className="flex items-center mt-1">
                                            <FiPhone className="mr-1" />
                                            {selectedRequest.proxyShopperPhone}
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t chi ti·∫øt */}
                            {selectedRequest.proposal?.proposedItems && (
                                <div className="mb-6">
                                    <h4 className="font-semibold mb-3 flex items-center text-green-800">
                                        <FiPackage className="mr-2" />
                                        S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t ({selectedRequest.proposal.proposedItems.length} s·∫£n ph·∫©m)
                                    </h4>
                                    <div className="space-y-4">
                                        {selectedRequest.proposal.proposedItems.map((item, idx) => (
                                            <div key={idx} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                                                <div className="flex items-start space-x-4">
                                                    {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
                                                    {item.imageUrls && item.imageUrls.length > 0 && (
                                                        <div className="flex-shrink-0">
                                                            <img 
                                                                src={item.imageUrls[0]} 
                                                                alt={item.name}
                                                                className="w-20 h-20 object-cover rounded-lg border"
                                                                onError={(e) => {
                                                                    e.target.src = '/placeholder-product.png';
                                                                }}
                                                            />
                                                        </div>
                                                    )}
                                                    
                                                    {/* Th√¥ng tin s·∫£n ph·∫©m */}
                                                    <div className="flex-1">
                                                        <div className="flex justify-between items-start mb-2">
                                                            <h5 className="font-bold text-lg text-gray-800">{item.name}</h5>
                                                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                                                                item.isAvailable 
                                                                    ? 'bg-green-100 text-green-800' 
                                                                    : 'bg-red-100 text-red-800'
                                                            }`}>
                                                                {item.isAvailable ? 'C√≤n h√†ng' : 'H·∫øt h√†ng'}
                                                            </span>
                                                        </div>
                                                        
                                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                                                            <div className="space-y-2">
                                                                <div className="flex justify-between">
                                                                    <span className="text-gray-600">S·ªë l∆∞·ª£ng:</span>
                                                                    <span className="font-semibold">{item.quantity} {item.unit}</span>
                                                                </div>
                                                                <div className="flex justify-between">
                                                                    <span className="text-gray-600">ƒê∆°n gi√°:</span>
                                                                    <span className="font-semibold text-green-600">
                                                                        {item.price?.toLocaleString()} ƒë/{item.unit}
                                                                    </span>
                                                                </div>
                                                                <div className="flex justify-between">
                                                                    <span className="text-gray-600">Th√†nh ti·ªÅn:</span>
                                                                    <span className="font-bold text-green-700 text-lg">
                                                                        {((item.price || 0) * (item.quantity || 0)).toLocaleString()} ƒë
                                                                    </span>
                                                                </div>
                                                            </div>
                                                            
                                                            <div className="space-y-2">
                                                                {item.storeName && (
                                                                    <div className="flex justify-between">
                                                                        <span className="text-gray-600">C·ª≠a h√†ng:</span>
                                                                        <span className="font-semibold">{item.storeName}</span>
                                                                    </div>
                                                                )}
                                                                {item.storeRating && (
                                                                    <div className="flex justify-between">
                                                                        <span className="text-gray-600">ƒê√°nh gi√° c·ª≠a h√†ng:</span>
                                                                        <span className="flex items-center font-semibold">
                                                                            ‚≠ê {item.storeRating}/5
                                                                        </span>
                                                                    </div>
                                                                )}
                                                                {item.categoryName && (
                                                                    <div className="flex justify-between">
                                                                        <span className="text-gray-600">Danh m·ª•c:</span>
                                                                        <span className="text-blue-600 font-semibold">{item.categoryName}</span>
                                                                    </div>
                                                                )}
                                                            </div>
                                                        </div>
                                                        
                                                        {/* Nhi·ªÅu h√¨nh ·∫£nh */}
                                                        {item.imageUrls && item.imageUrls.length > 1 && (
                                                            <div className="mt-3">
                                                                <span className="text-sm text-gray-600 mb-2 block">H√¨nh ·∫£nh kh√°c:</span>
                                                                <div className="flex space-x-2 overflow-x-auto">
                                                                    {item.imageUrls.slice(1, 4).map((url, imgIdx) => (
                                                                        <img 
                                                                            key={imgIdx}
                                                                            src={url} 
                                                                            alt={`${item.name} ${imgIdx + 2}`}
                                                                            className="w-12 h-12 object-cover rounded border flex-shrink-0"
                                                                            onError={(e) => {
                                                                                e.target.style.display = 'none';
                                                                            }}
                                                                        />
                                                                    ))}
                                                                    {item.imageUrls.length > 4 && (
                                                                        <div className="w-12 h-12 bg-gray-200 rounded border flex items-center justify-center text-xs text-gray-600 flex-shrink-0">
                                                                            +{item.imageUrls.length - 4}
                                                                        </div>
                                                                    )}
                                                                </div>
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Fallback cho format c≈© */}
                            {selectedRequest.proposal?.items && !selectedRequest.proposal?.proposedItems && (
                                <div className="mb-6">
                                    <h4 className="font-semibold mb-3 flex items-center text-green-800">
                                        <FiPackage className="mr-2" />
                                        S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t
                                    </h4>
                                    <div className="overflow-x-auto">
                                        <table className="w-full border border-gray-200 rounded-lg">
                                            <thead className="bg-gray-50">
                                                <tr>
                                                    <th className="px-4 py-3 text-left font-medium">T√™n s·∫£n ph·∫©m</th>
                                                    <th className="px-4 py-3 text-left font-medium">S·ªë l∆∞·ª£ng</th>
                                                    <th className="px-4 py-3 text-left font-medium">ƒê∆°n gi√°</th>
                                                    <th className="px-4 py-3 text-left font-medium">Th√†nh ti·ªÅn</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {selectedRequest.proposal.items.map((item, idx) => (
                                                    <tr key={idx} className="border-t">
                                                        <td className="px-4 py-3 font-medium">{item.name}</td>
                                                        <td className="px-4 py-3">{item.quantity} {item.unit}</td>
                                                        <td className="px-4 py-3 text-green-600 font-medium">
                                                            {item.price?.toLocaleString()} ƒë
                                                        </td>
                                                        <td className="px-4 py-3 text-green-600 font-bold">
                                                            {((item.price || 0) * (item.quantity || 0)).toLocaleString()} ƒë
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            )}

                            {/* T·ªïng k·∫øt chi ph√≠ */}
                            <div className="bg-green-50 rounded-lg p-4 mb-6">
                                <h4 className="font-semibold mb-3 text-green-800">T·ªïng k·∫øt chi ph√≠</h4>
                                <div className="space-y-2">
                                    <div className="flex justify-between">
                                        <span>T·ªïng ti·ªÅn s·∫£n ph·∫©m:</span>
                                        <span className="font-semibold">
                                            {(selectedRequest.proposal?.totalAmount || selectedRequest.proposal?.totalProductPrice || 0).toLocaleString()} ƒë
                                        </span>
                                    </div>
                                    <div className="flex justify-between">
                                        <span>Ph√≠ d·ªãch v·ª•:</span>
                                        <span className="font-semibold">{selectedRequest.proposal?.proxyFee?.toLocaleString()} ƒë</span>
                                    </div>
                                    <hr className="border-green-200" />
                                    <div className="flex justify-between text-lg font-bold">
                                        <span>T·ªïng c·ªông:</span>
                                        <span className="text-green-700">
                                            {((selectedRequest.proposal?.totalAmount || selectedRequest.proposal?.totalProductPrice || 0) + (selectedRequest.proposal?.proxyFee || 0)).toLocaleString()} ƒë
                                        </span>
                                    </div>
                                    
                                    {/* Th·ªùi gian ƒë·ªÅ xu·∫•t */}
                                    {selectedRequest.proposal?.createdAt && (
                                        <div className="pt-2 border-t border-green-200">
                                            <div className="flex justify-between text-sm">
                                                <span>Th·ªùi gian ƒë·ªÅ xu·∫•t:</span>
                                                <span className="font-medium">
                                                    {new Date(selectedRequest.proposal.createdAt).toLocaleString('vi-VN')}
                                                </span>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Ghi ch√∫ */}
                            {selectedRequest.proposal?.note && (
                                <div className="mb-6">
                                    <h4 className="font-semibold mb-2">Ghi ch√∫ t·ª´ Ng∆∞·ªùi ƒëi ch·ª£ gi√πm:</h4>
                                    <div className="bg-gray-50 rounded-lg p-4">
                                        <p className="text-gray-700">{selectedRequest.proposal.note}</p>
                                    </div>
                                </div>
                            )}

                            {/* N√∫t thao t√°c trong modal */}
                            <div className="flex gap-3 justify-end">
                                <button
                                    onClick={() => setShowProposalModal(false)}
                                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
                                >
                                    ƒê√≥ng
                                </button>
                                
                                {(selectedRequest.order?.status === 'Proposed' || selectedRequest.proposal?.orderStatus === 'Proposed') && (
                                    <>
                                        <button
                                            onClick={() => {
                                                setShowProposalModal(false);
                                                openRejectModal(selectedRequest);
                                            }}
                                            className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 flex items-center gap-2"
                                            disabled={actionLoading}
                                        >
                                            <FiX />
                                            T·ª´ ch·ªëi & Y√™u c·∫ßu l√™n l·∫°i
                                        </button>
                                        <button
                                            onClick={() => handleApproveProposal(selectedRequest.id)}
                                            className="px-6 py-2 bg-green-500 text-white rounded hover:bg-green-600 flex items-center gap-2"
                                            disabled={actionLoading}
                                        >
                                            <FiCheck />
                                            {actionLoading ? 'ƒêang x·ª≠ l√Ω...' : 'Duy·ªát & Thanh to√°n'}
                                        </button>
                                    </>
                                )}
                            </div>

                            {/* Th√¥ng b√°o trong modal */}
                            {actionError && (
                                <div className="mt-4 p-3 bg-red-100 border border-red-300 rounded text-red-700">
                                    {actionError}
                                </div>
                            )}
                            {actionSuccess && (
                                <div className="mt-4 p-3 bg-green-100 border border-green-300 rounded text-green-700">
                                    {actionSuccess}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* Modal h·ªßy y√™u c·∫ßu */}
            {showCancelModal && selectedRequestForAction && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div className="border-b px-6 py-4">
                            <h3 className="text-lg font-bold text-red-800">H·ªßy y√™u c·∫ßu #{selectedRequestForAction.id}</h3>
                        </div>
                        
                        <div className="p-6">
                            <div className="mb-4">
                                <p className="text-gray-700 mb-3">
                                    B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy y√™u c·∫ßu n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
                                </p>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    L√Ω do h·ªßy <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    value={cancelReason}
                                    onChange={(e) => setCancelReason(e.target.value)}
                                    placeholder="Nh·∫≠p l√Ω do h·ªßy y√™u c·∫ßu..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
                                    rows="3"
                                />
                            </div>

                            {actionError && (
                                <div className="mb-4 p-3 bg-red-100 border border-red-300 rounded text-red-700">
                                    {actionError}
                                </div>
                            )}

                            <div className="flex gap-3 justify-end">
                                <button
                                    onClick={() => {
                                        setShowCancelModal(false);
                                        setCancelReason("");
                                        setSelectedRequestForAction(null);
                                        setActionError("");
                                    }}
                                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
                                    disabled={actionLoading}
                                >
                                    Quay l·∫°i
                                </button>
                                <button
                                    onClick={handleCancelRequest}
                                    className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 flex items-center gap-2"
                                    disabled={actionLoading || !cancelReason.trim()}
                                >
                                    <FiX />
                                    {actionLoading ? 'ƒêang h·ªßy...' : 'X√°c nh·∫≠n h·ªßy'}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal t·ª´ ch·ªëi ƒë·ªÅ xu·∫•t */}
            {showRejectModal && selectedRequestForAction && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
                        <div className="border-b px-6 py-4">
                            <h3 className="text-lg font-bold text-orange-800">T·ª´ ch·ªëi ƒë·ªÅ xu·∫•t #{selectedRequestForAction.id}</h3>
                        </div>
                        
                        <div className="p-6">
                            <div className="mb-4">
                                <p className="text-gray-700 mb-3">
                                    T·ª´ ch·ªëi ƒë·ªÅ xu·∫•t hi·ªán t·∫°i v√† y√™u c·∫ßu proxy shopper l√™n ƒë∆°n l·∫°i v·ªõi s·∫£n ph·∫©m ph√π h·ª£p h∆°n.
                                </p>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    L√Ω do t·ª´ ch·ªëi <span className="text-red-500">*</span>
                                </label>
                                <textarea
                                    value={rejectReason}
                                    onChange={(e) => setRejectReason(e.target.value)}
                                    placeholder="V√≠ d·ª•: Gi√° cao qu√°, mong proxy t√¨m s·∫£n ph·∫©m r·∫ª h∆°n..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                                    rows="3"
                                />
                            </div>

                            {actionError && (
                                <div className="mb-4 p-3 bg-red-100 border border-red-300 rounded text-red-700">
                                    {actionError}
                                </div>
                            )}

                            <div className="flex gap-3 justify-end">
                                <button
                                    onClick={() => {
                                        setShowRejectModal(false);
                                        setRejectReason("");
                                        setSelectedRequestForAction(null);
                                        setActionError("");
                                    }}
                                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300"
                                    disabled={actionLoading}
                                >
                                    Quay l·∫°i
                                </button>
                                <button
                                    onClick={handleRejectProposal}
                                    className="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 flex items-center gap-2"
                                    disabled={actionLoading || !rejectReason.trim()}
                                >
                                    <FiX />
                                    {actionLoading ? 'ƒêang x·ª≠ l√Ω...' : 'T·ª´ ch·ªëi & Y√™u c·∫ßu l√™n l·∫°i'}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MyProxyRequests;
